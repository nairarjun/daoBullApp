{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PublicKey = void 0;\n\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\n\nvar eosjs_key_conversions_1 = require(\"./eosjs-key-conversions\");\n/** Represents/stores a public key and provides easy conversion for use with `elliptic` lib */\n\n\nvar PublicKey =\n/** @class */\nfunction () {\n  function PublicKey(key, ec) {\n    this.key = key;\n    this.ec = ec;\n  }\n  /** Instantiate public key from an EOSIO-format public key */\n\n\n  PublicKey.fromString = function (publicKeyStr, ec) {\n    var key = eosjs_numeric_1.stringToPublicKey(publicKeyStr);\n\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(key.type);\n    }\n\n    return new PublicKey(key, ec);\n  };\n  /** Instantiate public key from an `elliptic`-format public key */\n\n\n  PublicKey.fromElliptic = function (publicKey, keyType, ec) {\n    var x = publicKey.getPublic().getX().toArray('be', 32);\n    var y = publicKey.getPublic().getY().toArray('be', 32);\n\n    if (!ec) {\n      ec = eosjs_key_conversions_1.constructElliptic(keyType);\n    }\n\n    return new PublicKey({\n      type: keyType,\n      data: new Uint8Array([y[31] & 1 ? 3 : 2].concat(x))\n    }, ec);\n  };\n  /** Export public key as EOSIO-format public key */\n\n\n  PublicKey.prototype.toString = function () {\n    return eosjs_numeric_1.publicKeyToString(this.key);\n  };\n  /** Export public key as Legacy EOSIO-format public key */\n\n\n  PublicKey.prototype.toLegacyString = function () {\n    return eosjs_numeric_1.publicKeyToLegacyString(this.key);\n  };\n  /** Export public key as `elliptic`-format public key */\n\n\n  PublicKey.prototype.toElliptic = function () {\n    return this.ec.keyPair({\n      pub: Buffer.from(this.key.data)\n    });\n  };\n  /** Get key type from key */\n\n\n  PublicKey.prototype.getType = function () {\n    return this.key.type;\n  };\n  /** Validate a public key */\n\n\n  PublicKey.prototype.isValid = function () {\n    try {\n      var ellipticPublicKey = this.toElliptic();\n      var validationObj = ellipticPublicKey.validate();\n      return validationObj.result;\n    } catch (_a) {\n      return false;\n    }\n  };\n\n  return PublicKey;\n}();\n\nexports.PublicKey = PublicKey;","map":{"version":3,"sources":["../src/PublicKey.ts"],"names":[],"mappings":";;;;;;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAOA,IAAA,uBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;AAEA;;;AACA,IAAA,SAAA;AAAA;AAAA,YAAA;AACI,WAAA,SAAA,CAAoB,GAApB,EAAsC,EAAtC,EAA4C;AAAxB,SAAA,GAAA,GAAA,GAAA;AAAkB,SAAA,EAAA,GAAA,EAAA;AAAU;AAEhD;;;AACc,EAAA,SAAA,CAAA,UAAA,GAAd,UAAyB,YAAzB,EAA+C,EAA/C,EAAsD;AAClD,QAAM,GAAG,GAAG,eAAA,CAAA,iBAAA,CAAkB,YAAlB,CAAZ;;AACA,QAAI,CAAC,EAAL,EAAS;AACL,MAAA,EAAE,GAAG,uBAAA,CAAA,iBAAA,CAAkB,GAAG,CAAC,IAAtB,CAAL;AACH;;AACD,WAAO,IAAI,SAAJ,CAAc,GAAd,EAAmB,EAAnB,CAAP;AACH,GANa;AAQd;;;AACc,EAAA,SAAA,CAAA,YAAA,GAAd,UAA2B,SAA3B,EAAkD,OAAlD,EAAoE,EAApE,EAA2E;AACvE,QAAM,CAAC,GAAG,SAAS,CAAC,SAAV,GAAsB,IAAtB,GAA6B,OAA7B,CAAqC,IAArC,EAA2C,EAA3C,CAAV;AACA,QAAM,CAAC,GAAG,SAAS,CAAC,SAAV,GAAsB,IAAtB,GAA6B,OAA7B,CAAqC,IAArC,EAA2C,EAA3C,CAAV;;AACA,QAAI,CAAC,EAAL,EAAS;AACL,MAAA,EAAE,GAAG,uBAAA,CAAA,iBAAA,CAAkB,OAAlB,CAAL;AACH;;AACD,WAAO,IAAI,SAAJ,CAAc;AACjB,MAAA,IAAI,EAAE,OADW;AAEjB,MAAA,IAAI,EAAE,IAAI,UAAJ,CAAe,CAAE,CAAC,CAAC,EAAD,CAAD,GAAQ,CAAT,GAAc,CAAd,GAAkB,CAAnB,EAAsB,MAAtB,CAA6B,CAA7B,CAAf;AAFW,KAAd,EAGJ,EAHI,CAAP;AAIH,GAVa;AAYd;;;AACO,EAAA,SAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,WAAO,eAAA,CAAA,iBAAA,CAAkB,KAAK,GAAvB,CAAP;AACH,GAFM;AAIP;;;AACO,EAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAP,YAAA;AACI,WAAO,eAAA,CAAA,uBAAA,CAAwB,KAAK,GAA7B,CAAP;AACH,GAFM;AAIP;;;AACO,EAAA,SAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACI,WAAO,KAAK,EAAL,CAAQ,OAAR,CAAgB;AACnB,MAAA,GAAG,EAAE,MAAM,CAAC,IAAP,CAAY,KAAK,GAAL,CAAS,IAArB;AADc,KAAhB,CAAP;AAGH,GAJM;AAMP;;;AACO,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,WAAO,KAAK,GAAL,CAAS,IAAhB;AACH,GAFM;AAIP;;;AACO,EAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACI,QAAI;AACA,UAAM,iBAAiB,GAAG,KAAK,UAAL,EAA1B;AACA,UAAM,aAAa,GAAG,iBAAiB,CAAC,QAAlB,EAAtB;AACA,aAAO,aAAa,CAAC,MAArB;AACH,KAJD,CAIE,OAAA,EAAA,EAAM;AACJ,aAAO,KAAP;AACH;AACJ,GARM;;AASX,SAAA,SAAA;AAAC,CAzDD,EAAA;;AAAa,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PublicKey = void 0;\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\nvar eosjs_key_conversions_1 = require(\"./eosjs-key-conversions\");\n/** Represents/stores a public key and provides easy conversion for use with `elliptic` lib */\nvar PublicKey = /** @class */ (function () {\n    function PublicKey(key, ec) {\n        this.key = key;\n        this.ec = ec;\n    }\n    /** Instantiate public key from an EOSIO-format public key */\n    PublicKey.fromString = function (publicKeyStr, ec) {\n        var key = eosjs_numeric_1.stringToPublicKey(publicKeyStr);\n        if (!ec) {\n            ec = eosjs_key_conversions_1.constructElliptic(key.type);\n        }\n        return new PublicKey(key, ec);\n    };\n    /** Instantiate public key from an `elliptic`-format public key */\n    PublicKey.fromElliptic = function (publicKey, keyType, ec) {\n        var x = publicKey.getPublic().getX().toArray('be', 32);\n        var y = publicKey.getPublic().getY().toArray('be', 32);\n        if (!ec) {\n            ec = eosjs_key_conversions_1.constructElliptic(keyType);\n        }\n        return new PublicKey({\n            type: keyType,\n            data: new Uint8Array([(y[31] & 1) ? 3 : 2].concat(x)),\n        }, ec);\n    };\n    /** Export public key as EOSIO-format public key */\n    PublicKey.prototype.toString = function () {\n        return eosjs_numeric_1.publicKeyToString(this.key);\n    };\n    /** Export public key as Legacy EOSIO-format public key */\n    PublicKey.prototype.toLegacyString = function () {\n        return eosjs_numeric_1.publicKeyToLegacyString(this.key);\n    };\n    /** Export public key as `elliptic`-format public key */\n    PublicKey.prototype.toElliptic = function () {\n        return this.ec.keyPair({\n            pub: Buffer.from(this.key.data),\n        });\n    };\n    /** Get key type from key */\n    PublicKey.prototype.getType = function () {\n        return this.key.type;\n    };\n    /** Validate a public key */\n    PublicKey.prototype.isValid = function () {\n        try {\n            var ellipticPublicKey = this.toElliptic();\n            var validationObj = ellipticPublicKey.validate();\n            return validationObj.result;\n        }\n        catch (_a) {\n            return false;\n        }\n    };\n    return PublicKey;\n}());\nexports.PublicKey = PublicKey;\n//# sourceMappingURL=PublicKey.js.map"]},"metadata":{},"sourceType":"script"}