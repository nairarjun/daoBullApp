{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnchorUser = void 0;\n\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\n\nconst eosio_1 = require(\"@greymass/eosio\");\n\nconst UALAnchorError_1 = require(\"./UALAnchorError\");\n\nclass AnchorUser extends universal_authenticator_library_1.User {\n  constructor(rpc, client, identity) {\n    super();\n    this.accountName = '';\n    this.requestPermission = '';\n    const {\n      session\n    } = identity;\n    this.accountName = String(session.auth.actor);\n    this.chainId = String(session.chainId);\n\n    if (identity.signatures) {\n      [this.signerProof] = identity.signatures;\n    }\n\n    if (identity.signerKey) {\n      this.signerKey = identity.signerKey;\n    }\n\n    if (identity.resolvedTransaction) {\n      this.signerRequest = identity.transaction;\n    }\n\n    this.requestPermission = String(session.auth.permission);\n    this.session = session;\n    this.client = client;\n    this.rpc = rpc;\n  }\n\n  objectify(data) {\n    return JSON.parse(JSON.stringify(data));\n  }\n\n  signTransaction(transaction, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const completedTransaction = yield this.session.transact(transaction, options);\n        const wasBroadcast = options.broadcast !== false;\n        const serializedTransaction = eosio_1.PackedTransaction.fromSigned(eosio_1.SignedTransaction.from(completedTransaction.transaction));\n        return this.returnEosjsTransaction(wasBroadcast, Object.assign(Object.assign({}, completedTransaction), {\n          transaction_id: completedTransaction.payload.tx,\n          serializedTransaction: serializedTransaction.packed_trx.array,\n          signatures: this.objectify(completedTransaction.signatures)\n        }));\n      } catch (e) {\n        const message = 'Unable to sign transaction';\n        const type = universal_authenticator_library_1.UALErrorType.Signing;\n        const cause = e;\n        throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n      }\n    });\n  }\n\n  signArbitrary(publicKey, data, _) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UALAnchorError_1.UALAnchorError(`Anchor does not currently support signArbitrary(${publicKey}, ${data})`, universal_authenticator_library_1.UALErrorType.Unsupported, null);\n    });\n  }\n\n  verifyKeyOwnership(challenge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      throw new UALAnchorError_1.UALAnchorError(`Anchor does not currently support verifyKeyOwnership(${challenge})`, universal_authenticator_library_1.UALErrorType.Unsupported, null);\n    });\n  }\n\n  getAccountName() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.accountName;\n    });\n  }\n\n  getChainId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.chainId;\n    });\n  }\n\n  getKeys() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const keys = yield this.signatureProvider.getAvailableKeys(this.requestPermission);\n        return keys;\n      } catch (error) {\n        const message = `Unable to getKeys for account ${this.accountName}.\n        Please make sure your wallet is running.`;\n        const type = universal_authenticator_library_1.UALErrorType.DataRequest;\n        const cause = error;\n        throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n      }\n    });\n  }\n\n  isAccountValid() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const account = this.client && (yield this.client.v1.chain.get_account(this.accountName));\n        const actualKeys = this.extractAccountKeys(account);\n        const authorizationKeys = yield this.getKeys();\n        return actualKeys.filter(key => {\n          return authorizationKeys.indexOf(key) !== -1;\n        }).length > 0;\n      } catch (e) {\n        if (e.constructor.name === 'UALAnchorError') {\n          throw e;\n        }\n\n        const message = `Account validation failed for account ${this.accountName}.`;\n        const type = universal_authenticator_library_1.UALErrorType.Validation;\n        const cause = e;\n        throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n      }\n    });\n  }\n\n  extractAccountKeys(account) {\n    const keySubsets = account.permissions.map(permission => permission.required_auth.keys.map(key => key.key));\n    let keys = [];\n\n    for (const keySubset of keySubsets) {\n      keys = keys.concat(keySubset);\n    }\n\n    return keys;\n  }\n\n}\n\nexports.AnchorUser = AnchorUser;","map":{"version":3,"sources":["/home/turbo/devel/MyGame/contracts/decentralize-io-ui/node_modules/ual-anchor/dist/AnchorUser.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","AnchorUser","universal_authenticator_library_1","require","eosio_1","UALAnchorError_1","User","constructor","rpc","client","identity","accountName","requestPermission","session","String","auth","actor","chainId","signatures","signerProof","signerKey","resolvedTransaction","signerRequest","transaction","permission","objectify","data","JSON","parse","stringify","signTransaction","options","completedTransaction","transact","wasBroadcast","broadcast","serializedTransaction","PackedTransaction","fromSigned","SignedTransaction","from","returnEosjsTransaction","assign","transaction_id","payload","tx","packed_trx","array","message","type","UALErrorType","Signing","cause","UALAnchorError","signArbitrary","publicKey","_","Unsupported","verifyKeyOwnership","challenge","getAccountName","getChainId","getKeys","keys","signatureProvider","getAvailableKeys","error","DataRequest","isAccountValid","account","v1","chain","get_account","actualKeys","extractAccountKeys","authorizationKeys","filter","key","indexOf","length","name","Validation","keySubsets","permissions","map","required_auth","keySubset","concat"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AnchorUser = void 0;\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\nconst eosio_1 = require(\"@greymass/eosio\");\nconst UALAnchorError_1 = require(\"./UALAnchorError\");\nclass AnchorUser extends universal_authenticator_library_1.User {\n    constructor(rpc, client, identity) {\n        super();\n        this.accountName = '';\n        this.requestPermission = '';\n        const { session } = identity;\n        this.accountName = String(session.auth.actor);\n        this.chainId = String(session.chainId);\n        if (identity.signatures) {\n            [this.signerProof] = identity.signatures;\n        }\n        if (identity.signerKey) {\n            this.signerKey = identity.signerKey;\n        }\n        if (identity.resolvedTransaction) {\n            this.signerRequest = identity.transaction;\n        }\n        this.requestPermission = String(session.auth.permission);\n        this.session = session;\n        this.client = client;\n        this.rpc = rpc;\n    }\n    objectify(data) {\n        return JSON.parse(JSON.stringify(data));\n    }\n    signTransaction(transaction, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const completedTransaction = yield this.session.transact(transaction, options);\n                const wasBroadcast = (options.broadcast !== false);\n                const serializedTransaction = eosio_1.PackedTransaction.fromSigned(eosio_1.SignedTransaction.from(completedTransaction.transaction));\n                return this.returnEosjsTransaction(wasBroadcast, Object.assign(Object.assign({}, completedTransaction), { transaction_id: completedTransaction.payload.tx, serializedTransaction: serializedTransaction.packed_trx.array, signatures: this.objectify(completedTransaction.signatures) }));\n            }\n            catch (e) {\n                const message = 'Unable to sign transaction';\n                const type = universal_authenticator_library_1.UALErrorType.Signing;\n                const cause = e;\n                throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n            }\n        });\n    }\n    signArbitrary(publicKey, data, _) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UALAnchorError_1.UALAnchorError(`Anchor does not currently support signArbitrary(${publicKey}, ${data})`, universal_authenticator_library_1.UALErrorType.Unsupported, null);\n        });\n    }\n    verifyKeyOwnership(challenge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new UALAnchorError_1.UALAnchorError(`Anchor does not currently support verifyKeyOwnership(${challenge})`, universal_authenticator_library_1.UALErrorType.Unsupported, null);\n        });\n    }\n    getAccountName() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.accountName;\n        });\n    }\n    getChainId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.chainId;\n        });\n    }\n    getKeys() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const keys = yield this.signatureProvider.getAvailableKeys(this.requestPermission);\n                return keys;\n            }\n            catch (error) {\n                const message = `Unable to getKeys for account ${this.accountName}.\n        Please make sure your wallet is running.`;\n                const type = universal_authenticator_library_1.UALErrorType.DataRequest;\n                const cause = error;\n                throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n            }\n        });\n    }\n    isAccountValid() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const account = this.client && (yield this.client.v1.chain.get_account(this.accountName));\n                const actualKeys = this.extractAccountKeys(account);\n                const authorizationKeys = yield this.getKeys();\n                return actualKeys.filter((key) => {\n                    return authorizationKeys.indexOf(key) !== -1;\n                }).length > 0;\n            }\n            catch (e) {\n                if (e.constructor.name === 'UALAnchorError') {\n                    throw e;\n                }\n                const message = `Account validation failed for account ${this.accountName}.`;\n                const type = universal_authenticator_library_1.UALErrorType.Validation;\n                const cause = e;\n                throw new UALAnchorError_1.UALAnchorError(message, type, cause);\n            }\n        });\n    }\n    extractAccountKeys(account) {\n        const keySubsets = account.permissions.map((permission) => permission.required_auth.keys.map((key) => key.key));\n        let keys = [];\n        for (const keySubset of keySubsets) {\n            keys = keys.concat(keySubset);\n        }\n        return keys;\n    }\n}\nexports.AnchorUser = AnchorUser;\n"]},"metadata":{},"sourceType":"script"}