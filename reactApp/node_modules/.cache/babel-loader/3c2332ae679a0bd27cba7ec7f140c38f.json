{"ast":null,"code":"\"use strict\";\n/**\n * @module Serialize\n */\n// copyright defined in eosjs/LICENSE.txt\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar numeric = require(\"./eosjs-numeric\");\n/** State for serialize() and deserialize() */\n\n\nvar SerializerState =\n/** @class */\nfunction () {\n  function SerializerState(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /** Have any binary extensions been skipped? */\n\n\n    this.skippedBinaryExtension = false;\n    this.options = options;\n  }\n\n  return SerializerState;\n}();\n\nexports.SerializerState = SerializerState;\n/** Serialize and deserialize data */\n\nvar SerialBuffer =\n/** @class */\nfunction () {\n  /**\n   * @param __namedParameters\n   *    * `array`: `null` if serializing, or binary data to deserialize\n   *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n   *    * `textDecoder`: `TextDecider` instance to use. Pass in `null` if running in a browser\n   */\n  function SerialBuffer(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        textEncoder = _b.textEncoder,\n        textDecoder = _b.textDecoder,\n        array = _b.array;\n    /** Current position while reading (deserializing) */\n\n\n    this.readPos = 0;\n    this.array = array || new Uint8Array(1024);\n    this.length = array ? array.length : 0;\n    this.textEncoder = textEncoder || new TextEncoder();\n    this.textDecoder = textDecoder || new TextDecoder('utf-8', {\n      fatal: true\n    });\n  }\n  /** Resize `array` if needed to have at least `size` bytes free */\n\n\n  SerialBuffer.prototype.reserve = function (size) {\n    if (this.length + size <= this.array.length) {\n      return;\n    }\n\n    var l = this.array.length;\n\n    while (this.length + size > l) {\n      l = Math.ceil(l * 1.5);\n    }\n\n    var newArray = new Uint8Array(l);\n    newArray.set(this.array);\n    this.array = newArray;\n  };\n  /** Is there data available to read? */\n\n\n  SerialBuffer.prototype.haveReadData = function () {\n    return this.readPos < this.length;\n  };\n  /** Restart reading from the beginning */\n\n\n  SerialBuffer.prototype.restartRead = function () {\n    this.readPos = 0;\n  };\n  /** Return data with excess storage trimmed away */\n\n\n  SerialBuffer.prototype.asUint8Array = function () {\n    return new Uint8Array(this.array.buffer, this.array.byteOffset, this.length);\n  };\n  /** Append bytes */\n\n\n  SerialBuffer.prototype.pushArray = function (v) {\n    this.reserve(v.length);\n    this.array.set(v, this.length);\n    this.length += v.length;\n  };\n  /** Append bytes */\n\n\n  SerialBuffer.prototype.push = function () {\n    var v = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      v[_i] = arguments[_i];\n    }\n\n    this.pushArray(v);\n  };\n  /** Get a single byte */\n\n\n  SerialBuffer.prototype.get = function () {\n    if (this.readPos < this.length) {\n      return this.array[this.readPos++];\n    }\n\n    throw new Error('Read past end of buffer');\n  };\n  /** Append bytes in `v`. Throws if `len` doesn't match `v.length` */\n\n\n  SerialBuffer.prototype.pushUint8ArrayChecked = function (v, len) {\n    if (v.length !== len) {\n      throw new Error('Binary data has incorrect size');\n    }\n\n    this.pushArray(v);\n  };\n  /** Get `len` bytes */\n\n\n  SerialBuffer.prototype.getUint8Array = function (len) {\n    if (this.readPos + len > this.length) {\n      throw new Error('Read past end of buffer');\n    }\n\n    var result = new Uint8Array(this.array.buffer, this.array.byteOffset + this.readPos, len);\n    this.readPos += len;\n    return result;\n  };\n  /** Append a `uint16` */\n\n\n  SerialBuffer.prototype.pushUint16 = function (v) {\n    this.push(v >> 0 & 0xff, v >> 8 & 0xff);\n  };\n  /** Get a `uint16` */\n\n\n  SerialBuffer.prototype.getUint16 = function () {\n    var v = 0;\n    v |= this.get() << 0;\n    v |= this.get() << 8;\n    return v;\n  };\n  /** Append a `uint32` */\n\n\n  SerialBuffer.prototype.pushUint32 = function (v) {\n    this.push(v >> 0 & 0xff, v >> 8 & 0xff, v >> 16 & 0xff, v >> 24 & 0xff);\n  };\n  /** Get a `uint32` */\n\n\n  SerialBuffer.prototype.getUint32 = function () {\n    var v = 0;\n    v |= this.get() << 0;\n    v |= this.get() << 8;\n    v |= this.get() << 16;\n    v |= this.get() << 24;\n    return v >>> 0;\n  };\n  /** Append a `uint64`. *Caution*: `number` only has 53 bits of precision */\n\n\n  SerialBuffer.prototype.pushNumberAsUint64 = function (v) {\n    this.pushUint32(v >>> 0);\n    this.pushUint32(Math.floor(v / 4294967296) >>> 0);\n  };\n  /**\n   * Get a `uint64` as a `number`. *Caution*: `number` only has 53 bits of precision; some values will change.\n   * `numeric.binaryToDecimal(serialBuffer.getUint8Array(8))` recommended instead\n   */\n\n\n  SerialBuffer.prototype.getUint64AsNumber = function () {\n    var low = this.getUint32();\n    var high = this.getUint32();\n    return (high >>> 0) * 4294967296 + (low >>> 0);\n  };\n  /** Append a `varuint32` */\n\n\n  SerialBuffer.prototype.pushVaruint32 = function (v) {\n    while (true) {\n      if (v >>> 7) {\n        this.push(0x80 | v & 0x7f);\n        v = v >>> 7;\n      } else {\n        this.push(v);\n        break;\n      }\n    }\n  };\n  /** Get a `varuint32` */\n\n\n  SerialBuffer.prototype.getVaruint32 = function () {\n    var v = 0;\n    var bit = 0;\n\n    while (true) {\n      var b = this.get();\n      v |= (b & 0x7f) << bit;\n      bit += 7;\n\n      if (!(b & 0x80)) {\n        break;\n      }\n    }\n\n    return v >>> 0;\n  };\n  /** Append a `varint32` */\n\n\n  SerialBuffer.prototype.pushVarint32 = function (v) {\n    this.pushVaruint32(v << 1 ^ v >> 31);\n  };\n  /** Get a `varint32` */\n\n\n  SerialBuffer.prototype.getVarint32 = function () {\n    var v = this.getVaruint32();\n\n    if (v & 1) {\n      return ~v >> 1 | 2147483648;\n    } else {\n      return v >>> 1;\n    }\n  };\n  /** Append a `float32` */\n\n\n  SerialBuffer.prototype.pushFloat32 = function (v) {\n    this.pushArray(new Uint8Array(new Float32Array([v]).buffer));\n  };\n  /** Get a `float32` */\n\n\n  SerialBuffer.prototype.getFloat32 = function () {\n    return new Float32Array(this.getUint8Array(4).slice().buffer)[0];\n  };\n  /** Append a `float64` */\n\n\n  SerialBuffer.prototype.pushFloat64 = function (v) {\n    this.pushArray(new Uint8Array(new Float64Array([v]).buffer));\n  };\n  /** Get a `float64` */\n\n\n  SerialBuffer.prototype.getFloat64 = function () {\n    return new Float64Array(this.getUint8Array(8).slice().buffer)[0];\n  };\n  /** Append a `name` */\n\n\n  SerialBuffer.prototype.pushName = function (s) {\n    if (typeof s !== 'string') {\n      throw new Error('Expected string containing name');\n    }\n\n    function charToSymbol(c) {\n      if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {\n        return c - 'a'.charCodeAt(0) + 6;\n      }\n\n      if (c >= '1'.charCodeAt(0) && c <= '5'.charCodeAt(0)) {\n        return c - '1'.charCodeAt(0) + 1;\n      }\n\n      return 0;\n    }\n\n    var a = new Uint8Array(8);\n    var bit = 63;\n\n    for (var i = 0; i < s.length; ++i) {\n      var c = charToSymbol(s.charCodeAt(i));\n\n      if (bit < 5) {\n        c = c << 1;\n      }\n\n      for (var j = 4; j >= 0; --j) {\n        if (bit >= 0) {\n          a[Math.floor(bit / 8)] |= (c >> j & 1) << bit % 8;\n          --bit;\n        }\n      }\n    }\n\n    this.pushArray(a);\n  };\n  /** Get a `name` */\n\n\n  SerialBuffer.prototype.getName = function () {\n    var a = this.getUint8Array(8);\n    var result = '';\n\n    for (var bit = 63; bit >= 0;) {\n      var c = 0;\n\n      for (var i = 0; i < 5; ++i) {\n        if (bit >= 0) {\n          c = c << 1 | a[Math.floor(bit / 8)] >> bit % 8 & 1;\n          --bit;\n        }\n      }\n\n      if (c >= 6) {\n        result += String.fromCharCode(c + 'a'.charCodeAt(0) - 6);\n      } else if (c >= 1) {\n        result += String.fromCharCode(c + '1'.charCodeAt(0) - 1);\n      } else {\n        result += '.';\n      }\n    }\n\n    while (result.endsWith('.')) {\n      result = result.substr(0, result.length - 1);\n    }\n\n    return result;\n  };\n  /** Append length-prefixed binary data */\n\n\n  SerialBuffer.prototype.pushBytes = function (v) {\n    this.pushVaruint32(v.length);\n    this.pushArray(v);\n  };\n  /** Get length-prefixed binary data */\n\n\n  SerialBuffer.prototype.getBytes = function () {\n    return this.getUint8Array(this.getVaruint32());\n  };\n  /** Append a string */\n\n\n  SerialBuffer.prototype.pushString = function (v) {\n    this.pushBytes(this.textEncoder.encode(v));\n  };\n  /** Get a string */\n\n\n  SerialBuffer.prototype.getString = function () {\n    return this.textDecoder.decode(this.getBytes());\n  };\n  /** Append a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n\n\n  SerialBuffer.prototype.pushSymbolCode = function (name) {\n    if (typeof name !== 'string') {\n      throw new Error('Expected string containing symbol_code');\n    }\n\n    var a = [];\n    a.push.apply(a, __spread(this.textEncoder.encode(name)));\n\n    while (a.length < 8) {\n      a.push(0);\n    }\n\n    this.pushArray(a.slice(0, 8));\n  };\n  /** Get a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n\n\n  SerialBuffer.prototype.getSymbolCode = function () {\n    var a = this.getUint8Array(8);\n    var len;\n\n    for (len = 0; len < a.length; ++len) {\n      if (!a[len]) {\n        break;\n      }\n    }\n\n    var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n    return name;\n  };\n  /** Append a `symbol` */\n\n\n  SerialBuffer.prototype.pushSymbol = function (_a) {\n    var name = _a.name,\n        precision = _a.precision;\n    var a = [precision & 0xff];\n    a.push.apply(a, __spread(this.textEncoder.encode(name)));\n\n    while (a.length < 8) {\n      a.push(0);\n    }\n\n    this.pushArray(a.slice(0, 8));\n  };\n  /** Get a `symbol` */\n\n\n  SerialBuffer.prototype.getSymbol = function () {\n    var precision = this.get();\n    var a = this.getUint8Array(7);\n    var len;\n\n    for (len = 0; len < a.length; ++len) {\n      if (!a[len]) {\n        break;\n      }\n    }\n\n    var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n    return {\n      name: name,\n      precision: precision\n    };\n  };\n  /** Append an asset */\n\n\n  SerialBuffer.prototype.pushAsset = function (s) {\n    if (typeof s !== 'string') {\n      throw new Error('Expected string containing asset');\n    }\n\n    s = s.trim();\n    var pos = 0;\n    var amount = '';\n    var precision = 0;\n\n    if (s[pos] === '-') {\n      amount += '-';\n      ++pos;\n    }\n\n    var foundDigit = false;\n\n    while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n      foundDigit = true;\n      amount += s[pos];\n      ++pos;\n    }\n\n    if (!foundDigit) {\n      throw new Error('Asset must begin with a number');\n    }\n\n    if (s[pos] === '.') {\n      ++pos;\n\n      while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n        amount += s[pos];\n        ++precision;\n        ++pos;\n      }\n    }\n\n    var name = s.substr(pos).trim();\n    this.pushArray(numeric.signedDecimalToBinary(8, amount));\n    this.pushSymbol({\n      name: name,\n      precision: precision\n    });\n  };\n  /** Get an asset */\n\n\n  SerialBuffer.prototype.getAsset = function () {\n    var amount = this.getUint8Array(8);\n\n    var _a = this.getSymbol(),\n        name = _a.name,\n        precision = _a.precision;\n\n    var s = numeric.signedBinaryToDecimal(amount, precision + 1);\n\n    if (precision) {\n      s = s.substr(0, s.length - precision) + '.' + s.substr(s.length - precision);\n    }\n\n    return s + ' ' + name;\n  };\n  /** Append a public key */\n\n\n  SerialBuffer.prototype.pushPublicKey = function (s) {\n    var key = numeric.stringToPublicKey(s);\n    this.push(key.type);\n    this.pushArray(key.data);\n  };\n  /** Get a public key */\n\n\n  SerialBuffer.prototype.getPublicKey = function () {\n    var type = this.get();\n    var data = this.getUint8Array(numeric.publicKeyDataSize);\n    return numeric.publicKeyToString({\n      type: type,\n      data: data\n    });\n  };\n  /** Append a private key */\n\n\n  SerialBuffer.prototype.pushPrivateKey = function (s) {\n    var key = numeric.stringToPrivateKey(s);\n    this.push(key.type);\n    this.pushArray(key.data);\n  };\n  /** Get a private key */\n\n\n  SerialBuffer.prototype.getPrivateKey = function () {\n    var type = this.get();\n    var data = this.getUint8Array(numeric.privateKeyDataSize);\n    return numeric.privateKeyToString({\n      type: type,\n      data: data\n    });\n  };\n  /** Append a signature */\n\n\n  SerialBuffer.prototype.pushSignature = function (s) {\n    var key = numeric.stringToSignature(s);\n    this.push(key.type);\n    this.pushArray(key.data);\n  };\n  /** Get a signature */\n\n\n  SerialBuffer.prototype.getSignature = function () {\n    var type = this.get();\n    var data = this.getUint8Array(numeric.signatureDataSize);\n    return numeric.signatureToString({\n      type: type,\n      data: data\n    });\n  };\n\n  return SerialBuffer;\n}(); // SerialBuffer\n\n\nexports.SerialBuffer = SerialBuffer;\n/** Is this a supported ABI version? */\n\nfunction supportedAbiVersion(version) {\n  return version.startsWith('eosio::abi/1.');\n}\n\nexports.supportedAbiVersion = supportedAbiVersion;\n\nfunction checkDateParse(date) {\n  var result = Date.parse(date);\n\n  if (Number.isNaN(result)) {\n    throw new Error('Invalid time format');\n  }\n\n  return result;\n}\n/** Convert date in ISO format to `time_point` (miliseconds since epoch) */\n\n\nfunction dateToTimePoint(date) {\n  return Math.round(checkDateParse(date + 'Z') * 1000);\n}\n\nexports.dateToTimePoint = dateToTimePoint;\n/** Convert `time_point` (miliseconds since epoch) to date in ISO format */\n\nfunction timePointToDate(us) {\n  var s = new Date(us / 1000).toISOString();\n  return s.substr(0, s.length - 1);\n}\n\nexports.timePointToDate = timePointToDate;\n/** Convert date in ISO format to `time_point_sec` (seconds since epoch) */\n\nfunction dateToTimePointSec(date) {\n  return Math.round(checkDateParse(date + 'Z') / 1000);\n}\n\nexports.dateToTimePointSec = dateToTimePointSec;\n/** Convert `time_point_sec` (seconds since epoch) to to date in ISO format */\n\nfunction timePointSecToDate(sec) {\n  var s = new Date(sec * 1000).toISOString();\n  return s.substr(0, s.length - 1);\n}\n\nexports.timePointSecToDate = timePointSecToDate;\n/** Convert date in ISO format to `block_timestamp_type` (half-seconds since a different epoch) */\n\nfunction dateToBlockTimestamp(date) {\n  return Math.round((checkDateParse(date + 'Z') - 946684800000) / 500);\n}\n\nexports.dateToBlockTimestamp = dateToBlockTimestamp;\n/** Convert `block_timestamp_type` (half-seconds since a different epoch) to to date in ISO format */\n\nfunction blockTimestampToDate(slot) {\n  var s = new Date(slot * 500 + 946684800000).toISOString();\n  return s.substr(0, s.length - 1);\n}\n\nexports.blockTimestampToDate = blockTimestampToDate;\n/** Convert `string` to `Symbol`. format: `precision,NAME`. */\n\nfunction stringToSymbol(s) {\n  if (typeof s !== 'string') {\n    throw new Error('Expected string containing symbol');\n  }\n\n  var m = s.match(/^([0-9]+),([A-Z]+)$/);\n\n  if (!m) {\n    throw new Error('Invalid symbol');\n  }\n\n  return {\n    name: m[2],\n    precision: +m[1]\n  };\n}\n\nexports.stringToSymbol = stringToSymbol;\n/** Convert `Symbol` to `string`. format: `precision,NAME`. */\n\nfunction symbolToString(_a) {\n  var name = _a.name,\n      precision = _a.precision;\n  return precision + ',' + name;\n}\n\nexports.symbolToString = symbolToString;\n/** Convert binary data to hex */\n\nfunction arrayToHex(data) {\n  var e_1, _a;\n\n  var result = '';\n\n  try {\n    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n      var x = data_1_1.value;\n      result += ('00' + x.toString(16)).slice(-2);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return result.toUpperCase();\n}\n\nexports.arrayToHex = arrayToHex;\n/** Convert hex to binary data */\n\nfunction hexToUint8Array(hex) {\n  if (typeof hex !== 'string') {\n    throw new Error('Expected string containing hex digits');\n  }\n\n  if (hex.length % 2) {\n    throw new Error('Odd number of hex digits');\n  }\n\n  var l = hex.length / 2;\n  var result = new Uint8Array(l);\n\n  for (var i = 0; i < l; ++i) {\n    var x = parseInt(hex.substr(i * 2, 2), 16);\n\n    if (Number.isNaN(x)) {\n      throw new Error('Expected hex string');\n    }\n\n    result[i] = x;\n  }\n\n  return result;\n}\n\nexports.hexToUint8Array = hexToUint8Array;\n\nfunction serializeUnknown(buffer, data) {\n  throw new Error('Don\\'t know how to serialize ' + this.name);\n}\n\nfunction deserializeUnknown(buffer) {\n  throw new Error('Don\\'t know how to deserialize ' + this.name);\n}\n\nfunction serializeStruct(buffer, data, state, allowExtensions) {\n  if (state === void 0) {\n    state = new SerializerState();\n  }\n\n  if (allowExtensions === void 0) {\n    allowExtensions = true;\n  }\n\n  var e_2, _a;\n\n  if (typeof data !== 'object') {\n    throw new Error('expected object containing data: ' + JSON.stringify(data));\n  }\n\n  if (this.base) {\n    this.base.serialize(buffer, data, state, allowExtensions);\n  }\n\n  try {\n    for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var field = _c.value;\n\n      if (field.name in data) {\n        if (state.skippedBinaryExtension) {\n          throw new Error('unexpected ' + this.name + '.' + field.name);\n        }\n\n        field.type.serialize(buffer, data[field.name], state, allowExtensions && field === this.fields[this.fields.length - 1]);\n      } else {\n        if (allowExtensions && field.type.extensionOf) {\n          state.skippedBinaryExtension = true;\n        } else {\n          throw new Error('missing ' + this.name + '.' + field.name + ' (type=' + field.type.name + ')');\n        }\n      }\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction deserializeStruct(buffer, state, allowExtensions) {\n  if (state === void 0) {\n    state = new SerializerState();\n  }\n\n  if (allowExtensions === void 0) {\n    allowExtensions = true;\n  }\n\n  var e_3, _a;\n\n  var result;\n\n  if (this.base) {\n    result = this.base.deserialize(buffer, state, allowExtensions);\n  } else {\n    result = {};\n  }\n\n  try {\n    for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var field = _c.value;\n\n      if (allowExtensions && field.type.extensionOf && !buffer.haveReadData()) {\n        state.skippedBinaryExtension = true;\n      } else {\n        result[field.name] = field.type.deserialize(buffer, state, allowExtensions);\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  return result;\n}\n\nfunction serializeVariant(buffer, data, state, allowExtensions) {\n  if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== 'string') {\n    throw new Error('expected variant: [\"type\", value]');\n  }\n\n  var i = this.fields.findIndex(function (field) {\n    return field.name === data[0];\n  });\n\n  if (i < 0) {\n    throw new Error(\"type \\\"\" + data[0] + \"\\\" is not valid for variant\");\n  }\n\n  buffer.pushVaruint32(i);\n  this.fields[i].type.serialize(buffer, data[1], state, allowExtensions);\n}\n\nfunction deserializeVariant(buffer, state, allowExtensions) {\n  var i = buffer.getVaruint32();\n\n  if (i >= this.fields.length) {\n    throw new Error(\"type index \" + i + \" is not valid for variant\");\n  }\n\n  var field = this.fields[i];\n  return [field.name, field.type.deserialize(buffer, state, allowExtensions)];\n}\n\nfunction serializeArray(buffer, data, state, allowExtensions) {\n  var e_4, _a;\n\n  buffer.pushVaruint32(data.length);\n\n  try {\n    for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {\n      var item = data_2_1.value;\n      this.arrayOf.serialize(buffer, item, state, false);\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n}\n\nfunction deserializeArray(buffer, state, allowExtensions) {\n  var len = buffer.getVaruint32();\n  var result = [];\n\n  for (var i = 0; i < len; ++i) {\n    result.push(this.arrayOf.deserialize(buffer, state, false));\n  }\n\n  return result;\n}\n\nfunction serializeOptional(buffer, data, state, allowExtensions) {\n  if (data === null || data === undefined) {\n    buffer.push(0);\n  } else {\n    buffer.push(1);\n    this.optionalOf.serialize(buffer, data, state, allowExtensions);\n  }\n}\n\nfunction deserializeOptional(buffer, state, allowExtensions) {\n  if (buffer.get()) {\n    return this.optionalOf.deserialize(buffer, state, allowExtensions);\n  } else {\n    return null;\n  }\n}\n\nfunction serializeExtension(buffer, data, state, allowExtensions) {\n  this.extensionOf.serialize(buffer, data, state, allowExtensions);\n}\n\nfunction deserializeExtension(buffer, state, allowExtensions) {\n  return this.extensionOf.deserialize(buffer, state, allowExtensions);\n}\n\nfunction createType(attrs) {\n  return __assign({\n    name: '<missing name>',\n    aliasOfName: '',\n    arrayOf: null,\n    optionalOf: null,\n    extensionOf: null,\n    baseName: '',\n    base: null,\n    fields: [],\n    serialize: serializeUnknown,\n    deserialize: deserializeUnknown\n  }, attrs);\n}\n\nfunction checkRange(orig, converted) {\n  if (Number.isNaN(+orig) || Number.isNaN(+converted) || typeof orig !== 'number' && typeof orig !== 'string') {\n    throw new Error('Expected number');\n  }\n\n  if (+orig !== +converted) {\n    throw new Error('Number is out of range');\n  }\n\n  return +orig;\n}\n/** Create the set of types built-in to the abi format */\n\n\nfunction createInitialTypes() {\n  var result = new Map(Object.entries({\n    bool: createType({\n      name: 'bool',\n      serialize: function serialize(buffer, data) {\n        if (typeof data !== 'boolean') {\n          throw new Error('Expected true or false');\n        }\n\n        buffer.push(data ? 1 : 0);\n      },\n      deserialize: function deserialize(buffer) {\n        return !!buffer.get();\n      }\n    }),\n    uint8: createType({\n      name: 'uint8',\n      serialize: function serialize(buffer, data) {\n        buffer.push(checkRange(data, data & 0xff));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.get();\n      }\n    }),\n    int8: createType({\n      name: 'int8',\n      serialize: function serialize(buffer, data) {\n        buffer.push(checkRange(data, data << 24 >> 24));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.get() << 24 >> 24;\n      }\n    }),\n    uint16: createType({\n      name: 'uint16',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint16(checkRange(data, data & 0xffff));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getUint16();\n      }\n    }),\n    int16: createType({\n      name: 'int16',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint16(checkRange(data, data << 16 >> 16));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getUint16() << 16 >> 16;\n      }\n    }),\n    uint32: createType({\n      name: 'uint32',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint32(checkRange(data, data >>> 0));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getUint32();\n      }\n    }),\n    uint64: createType({\n      name: 'uint64',\n      serialize: function serialize(buffer, data) {\n        buffer.pushArray(numeric.decimalToBinary(8, '' + data));\n      },\n      deserialize: function deserialize(buffer) {\n        return numeric.binaryToDecimal(buffer.getUint8Array(8));\n      }\n    }),\n    int64: createType({\n      name: 'int64',\n      serialize: function serialize(buffer, data) {\n        buffer.pushArray(numeric.signedDecimalToBinary(8, '' + data));\n      },\n      deserialize: function deserialize(buffer) {\n        return numeric.signedBinaryToDecimal(buffer.getUint8Array(8));\n      }\n    }),\n    int32: createType({\n      name: 'int32',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint32(checkRange(data, data | 0));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getUint32() | 0;\n      }\n    }),\n    varuint32: createType({\n      name: 'varuint32',\n      serialize: function serialize(buffer, data) {\n        buffer.pushVaruint32(checkRange(data, data >>> 0));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getVaruint32();\n      }\n    }),\n    varint32: createType({\n      name: 'varint32',\n      serialize: function serialize(buffer, data) {\n        buffer.pushVarint32(checkRange(data, data | 0));\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getVarint32();\n      }\n    }),\n    uint128: createType({\n      name: 'uint128',\n      serialize: function serialize(buffer, data) {\n        buffer.pushArray(numeric.decimalToBinary(16, '' + data));\n      },\n      deserialize: function deserialize(buffer) {\n        return numeric.binaryToDecimal(buffer.getUint8Array(16));\n      }\n    }),\n    int128: createType({\n      name: 'int128',\n      serialize: function serialize(buffer, data) {\n        buffer.pushArray(numeric.signedDecimalToBinary(16, '' + data));\n      },\n      deserialize: function deserialize(buffer) {\n        return numeric.signedBinaryToDecimal(buffer.getUint8Array(16));\n      }\n    }),\n    float32: createType({\n      name: 'float32',\n      serialize: function serialize(buffer, data) {\n        buffer.pushFloat32(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getFloat32();\n      }\n    }),\n    float64: createType({\n      name: 'float64',\n      serialize: function serialize(buffer, data) {\n        buffer.pushFloat64(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getFloat64();\n      }\n    }),\n    float128: createType({\n      name: 'float128',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint8ArrayChecked(hexToUint8Array(data), 16);\n      },\n      deserialize: function deserialize(buffer) {\n        return arrayToHex(buffer.getUint8Array(16));\n      }\n    }),\n    bytes: createType({\n      name: 'bytes',\n      serialize: function serialize(buffer, data) {\n        if (data instanceof Uint8Array || Array.isArray(data)) {\n          buffer.pushBytes(data);\n        } else {\n          buffer.pushBytes(hexToUint8Array(data));\n        }\n      },\n      deserialize: function deserialize(buffer, state) {\n        if (state && state.options.bytesAsUint8Array) {\n          return buffer.getBytes();\n        } else {\n          return arrayToHex(buffer.getBytes());\n        }\n      }\n    }),\n    string: createType({\n      name: 'string',\n      serialize: function serialize(buffer, data) {\n        buffer.pushString(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getString();\n      }\n    }),\n    name: createType({\n      name: 'name',\n      serialize: function serialize(buffer, data) {\n        buffer.pushName(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getName();\n      }\n    }),\n    time_point: createType({\n      name: 'time_point',\n      serialize: function serialize(buffer, data) {\n        buffer.pushNumberAsUint64(dateToTimePoint(data));\n      },\n      deserialize: function deserialize(buffer) {\n        return timePointToDate(buffer.getUint64AsNumber());\n      }\n    }),\n    time_point_sec: createType({\n      name: 'time_point_sec',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint32(dateToTimePointSec(data));\n      },\n      deserialize: function deserialize(buffer) {\n        return timePointSecToDate(buffer.getUint32());\n      }\n    }),\n    block_timestamp_type: createType({\n      name: 'block_timestamp_type',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint32(dateToBlockTimestamp(data));\n      },\n      deserialize: function deserialize(buffer) {\n        return blockTimestampToDate(buffer.getUint32());\n      }\n    }),\n    symbol_code: createType({\n      name: 'symbol_code',\n      serialize: function serialize(buffer, data) {\n        buffer.pushSymbolCode(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getSymbolCode();\n      }\n    }),\n    symbol: createType({\n      name: 'symbol',\n      serialize: function serialize(buffer, data) {\n        buffer.pushSymbol(stringToSymbol(data));\n      },\n      deserialize: function deserialize(buffer) {\n        return symbolToString(buffer.getSymbol());\n      }\n    }),\n    asset: createType({\n      name: 'asset',\n      serialize: function serialize(buffer, data) {\n        buffer.pushAsset(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getAsset();\n      }\n    }),\n    checksum160: createType({\n      name: 'checksum160',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint8ArrayChecked(hexToUint8Array(data), 20);\n      },\n      deserialize: function deserialize(buffer) {\n        return arrayToHex(buffer.getUint8Array(20));\n      }\n    }),\n    checksum256: createType({\n      name: 'checksum256',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint8ArrayChecked(hexToUint8Array(data), 32);\n      },\n      deserialize: function deserialize(buffer) {\n        return arrayToHex(buffer.getUint8Array(32));\n      }\n    }),\n    checksum512: createType({\n      name: 'checksum512',\n      serialize: function serialize(buffer, data) {\n        buffer.pushUint8ArrayChecked(hexToUint8Array(data), 64);\n      },\n      deserialize: function deserialize(buffer) {\n        return arrayToHex(buffer.getUint8Array(64));\n      }\n    }),\n    public_key: createType({\n      name: 'public_key',\n      serialize: function serialize(buffer, data) {\n        buffer.pushPublicKey(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getPublicKey();\n      }\n    }),\n    private_key: createType({\n      name: 'private_key',\n      serialize: function serialize(buffer, data) {\n        buffer.pushPrivateKey(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getPrivateKey();\n      }\n    }),\n    signature: createType({\n      name: 'signature',\n      serialize: function serialize(buffer, data) {\n        buffer.pushSignature(data);\n      },\n      deserialize: function deserialize(buffer) {\n        return buffer.getSignature();\n      }\n    })\n  }));\n  result.set('extended_asset', createType({\n    name: 'extended_asset',\n    baseName: '',\n    fields: [{\n      name: 'quantity',\n      typeName: 'asset',\n      type: result.get('asset')\n    }, {\n      name: 'contract',\n      typeName: 'name',\n      type: result.get('name')\n    }],\n    serialize: serializeStruct,\n    deserialize: deserializeStruct\n  }));\n  return result;\n} // createInitialTypes()\n\n\nexports.createInitialTypes = createInitialTypes;\n/** Get type from `types` */\n\nfunction getType(types, name) {\n  var type = types.get(name);\n\n  if (type && type.aliasOfName) {\n    return getType(types, type.aliasOfName);\n  }\n\n  if (type) {\n    return type;\n  }\n\n  if (name.endsWith('[]')) {\n    return createType({\n      name: name,\n      arrayOf: getType(types, name.substr(0, name.length - 2)),\n      serialize: serializeArray,\n      deserialize: deserializeArray\n    });\n  }\n\n  if (name.endsWith('?')) {\n    return createType({\n      name: name,\n      optionalOf: getType(types, name.substr(0, name.length - 1)),\n      serialize: serializeOptional,\n      deserialize: deserializeOptional\n    });\n  }\n\n  if (name.endsWith('$')) {\n    return createType({\n      name: name,\n      extensionOf: getType(types, name.substr(0, name.length - 1)),\n      serialize: serializeExtension,\n      deserialize: deserializeExtension\n    });\n  }\n\n  throw new Error('Unknown type: ' + name);\n}\n\nexports.getType = getType;\n/**\n * Get types from abi\n * @param initialTypes Set of types to build on.\n *     In most cases, it's best to fill this from a fresh call to `getTypesFromAbi()`.\n */\n\nfunction getTypesFromAbi(initialTypes, abi) {\n  var e_5, _a, e_6, _b, e_7, _c, e_8, _d, e_9, _e;\n\n  var types = new Map(initialTypes);\n\n  if (abi.types) {\n    try {\n      for (var _f = __values(abi.types), _g = _f.next(); !_g.done; _g = _f.next()) {\n        var _h = _g.value,\n            new_type_name = _h.new_type_name,\n            type = _h.type;\n        types.set(new_type_name, createType({\n          name: new_type_name,\n          aliasOfName: type\n        }));\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n  }\n\n  if (abi.structs) {\n    try {\n      for (var _j = __values(abi.structs), _k = _j.next(); !_k.done; _k = _j.next()) {\n        var _l = _k.value,\n            name_1 = _l.name,\n            base = _l.base,\n            fields = _l.fields;\n        types.set(name_1, createType({\n          name: name_1,\n          baseName: base,\n          fields: fields.map(function (_a) {\n            var n = _a.name,\n                type = _a.type;\n            return {\n              name: n,\n              typeName: type,\n              type: null\n            };\n          }),\n          serialize: serializeStruct,\n          deserialize: deserializeStruct\n        }));\n      }\n    } catch (e_6_1) {\n      e_6 = {\n        error: e_6_1\n      };\n    } finally {\n      try {\n        if (_k && !_k.done && (_b = _j.return)) _b.call(_j);\n      } finally {\n        if (e_6) throw e_6.error;\n      }\n    }\n  }\n\n  if (abi.variants) {\n    try {\n      for (var _m = __values(abi.variants), _o = _m.next(); !_o.done; _o = _m.next()) {\n        var _p = _o.value,\n            name_2 = _p.name,\n            t = _p.types;\n        types.set(name_2, createType({\n          name: name_2,\n          fields: t.map(function (s) {\n            return {\n              name: s,\n              typeName: s,\n              type: null\n            };\n          }),\n          serialize: serializeVariant,\n          deserialize: deserializeVariant\n        }));\n      }\n    } catch (e_7_1) {\n      e_7 = {\n        error: e_7_1\n      };\n    } finally {\n      try {\n        if (_o && !_o.done && (_c = _m.return)) _c.call(_m);\n      } finally {\n        if (e_7) throw e_7.error;\n      }\n    }\n  }\n\n  try {\n    for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {\n      var _q = __read(types_1_1.value, 2),\n          name_3 = _q[0],\n          type = _q[1];\n\n      if (type.baseName) {\n        type.base = getType(types, type.baseName);\n      }\n\n      try {\n        for (var _r = __values(type.fields), _s = _r.next(); !_s.done; _s = _r.next()) {\n          var field = _s.value;\n          field.type = getType(types, field.typeName);\n        }\n      } catch (e_9_1) {\n        e_9 = {\n          error: e_9_1\n        };\n      } finally {\n        try {\n          if (_s && !_s.done && (_e = _r.return)) _e.call(_r);\n        } finally {\n          if (e_9) throw e_9.error;\n        }\n      }\n    }\n  } catch (e_8_1) {\n    e_8 = {\n      error: e_8_1\n    };\n  } finally {\n    try {\n      if (types_1_1 && !types_1_1.done && (_d = types_1.return)) _d.call(types_1);\n    } finally {\n      if (e_8) throw e_8.error;\n    }\n  }\n\n  return types;\n} // getTypesFromAbi\n\n\nexports.getTypesFromAbi = getTypesFromAbi;\n/** TAPoS: Return transaction fields which reference `refBlock` and expire `expireSeconds` after `refBlock.timestamp` */\n\nfunction transactionHeader(refBlock, expireSeconds) {\n  return {\n    expiration: timePointSecToDate(dateToTimePointSec(refBlock.timestamp) + expireSeconds),\n    ref_block_num: refBlock.block_num & 0xffff,\n    ref_block_prefix: refBlock.ref_block_prefix\n  };\n}\n\nexports.transactionHeader = transactionHeader;\n/** Convert action data to serialized form (hex) */\n\nfunction serializeActionData(contract, account, name, data, textEncoder, textDecoder) {\n  var action = contract.actions.get(name);\n\n  if (!action) {\n    throw new Error(\"Unknown action \" + name + \" in contract \" + account);\n  }\n\n  var buffer = new SerialBuffer({\n    textEncoder: textEncoder,\n    textDecoder: textDecoder\n  });\n  action.serialize(buffer, data);\n  return arrayToHex(buffer.asUint8Array());\n}\n\nexports.serializeActionData = serializeActionData;\n/** Return action in serialized form */\n\nfunction serializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {\n  return {\n    account: account,\n    name: name,\n    authorization: authorization,\n    data: serializeActionData(contract, account, name, data, textEncoder, textDecoder)\n  };\n}\n\nexports.serializeAction = serializeAction;\n/** Deserialize action data. If `data` is a `string`, then it's assumed to be in hex. */\n\nfunction deserializeActionData(contract, account, name, data, textEncoder, textDecoder) {\n  var action = contract.actions.get(name);\n\n  if (typeof data === 'string') {\n    data = hexToUint8Array(data);\n  }\n\n  if (!action) {\n    throw new Error(\"Unknown action \" + name + \" in contract \" + account);\n  }\n\n  var buffer = new SerialBuffer({\n    textDecoder: textDecoder,\n    textEncoder: textEncoder\n  });\n  buffer.pushArray(data);\n  return action.deserialize(buffer);\n}\n\nexports.deserializeActionData = deserializeActionData;\n/** Deserialize action. If `data` is a `string`, then it's assumed to be in hex. */\n\nfunction deserializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {\n  return {\n    account: account,\n    name: name,\n    authorization: authorization,\n    data: deserializeActionData(contract, account, name, data, textEncoder, textDecoder)\n  };\n}\n\nexports.deserializeAction = deserializeAction;","map":{"version":3,"sources":["../src/eosjs-serialize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @module Serialize\n */\n// copyright defined in eosjs/LICENSE.txt\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar numeric = require(\"./eosjs-numeric\");\n/** State for serialize() and deserialize() */\nvar SerializerState = /** @class */ (function () {\n    function SerializerState(options) {\n        if (options === void 0) { options = {}; }\n        /** Have any binary extensions been skipped? */\n        this.skippedBinaryExtension = false;\n        this.options = options;\n    }\n    return SerializerState;\n}());\nexports.SerializerState = SerializerState;\n/** Serialize and deserialize data */\nvar SerialBuffer = /** @class */ (function () {\n    /**\n     * @param __namedParameters\n     *    * `array`: `null` if serializing, or binary data to deserialize\n     *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n     *    * `textDecoder`: `TextDecider` instance to use. Pass in `null` if running in a browser\n     */\n    function SerialBuffer(_a) {\n        var _b = _a === void 0 ? {} : _a, textEncoder = _b.textEncoder, textDecoder = _b.textDecoder, array = _b.array;\n        /** Current position while reading (deserializing) */\n        this.readPos = 0;\n        this.array = array || new Uint8Array(1024);\n        this.length = array ? array.length : 0;\n        this.textEncoder = textEncoder || new TextEncoder();\n        this.textDecoder = textDecoder || new TextDecoder('utf-8', { fatal: true });\n    }\n    /** Resize `array` if needed to have at least `size` bytes free */\n    SerialBuffer.prototype.reserve = function (size) {\n        if (this.length + size <= this.array.length) {\n            return;\n        }\n        var l = this.array.length;\n        while (this.length + size > l) {\n            l = Math.ceil(l * 1.5);\n        }\n        var newArray = new Uint8Array(l);\n        newArray.set(this.array);\n        this.array = newArray;\n    };\n    /** Is there data available to read? */\n    SerialBuffer.prototype.haveReadData = function () {\n        return this.readPos < this.length;\n    };\n    /** Restart reading from the beginning */\n    SerialBuffer.prototype.restartRead = function () {\n        this.readPos = 0;\n    };\n    /** Return data with excess storage trimmed away */\n    SerialBuffer.prototype.asUint8Array = function () {\n        return new Uint8Array(this.array.buffer, this.array.byteOffset, this.length);\n    };\n    /** Append bytes */\n    SerialBuffer.prototype.pushArray = function (v) {\n        this.reserve(v.length);\n        this.array.set(v, this.length);\n        this.length += v.length;\n    };\n    /** Append bytes */\n    SerialBuffer.prototype.push = function () {\n        var v = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            v[_i] = arguments[_i];\n        }\n        this.pushArray(v);\n    };\n    /** Get a single byte */\n    SerialBuffer.prototype.get = function () {\n        if (this.readPos < this.length) {\n            return this.array[this.readPos++];\n        }\n        throw new Error('Read past end of buffer');\n    };\n    /** Append bytes in `v`. Throws if `len` doesn't match `v.length` */\n    SerialBuffer.prototype.pushUint8ArrayChecked = function (v, len) {\n        if (v.length !== len) {\n            throw new Error('Binary data has incorrect size');\n        }\n        this.pushArray(v);\n    };\n    /** Get `len` bytes */\n    SerialBuffer.prototype.getUint8Array = function (len) {\n        if (this.readPos + len > this.length) {\n            throw new Error('Read past end of buffer');\n        }\n        var result = new Uint8Array(this.array.buffer, this.array.byteOffset + this.readPos, len);\n        this.readPos += len;\n        return result;\n    };\n    /** Append a `uint16` */\n    SerialBuffer.prototype.pushUint16 = function (v) {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff);\n    };\n    /** Get a `uint16` */\n    SerialBuffer.prototype.getUint16 = function () {\n        var v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        return v;\n    };\n    /** Append a `uint32` */\n    SerialBuffer.prototype.pushUint32 = function (v) {\n        this.push((v >> 0) & 0xff, (v >> 8) & 0xff, (v >> 16) & 0xff, (v >> 24) & 0xff);\n    };\n    /** Get a `uint32` */\n    SerialBuffer.prototype.getUint32 = function () {\n        var v = 0;\n        v |= this.get() << 0;\n        v |= this.get() << 8;\n        v |= this.get() << 16;\n        v |= this.get() << 24;\n        return v >>> 0;\n    };\n    /** Append a `uint64`. *Caution*: `number` only has 53 bits of precision */\n    SerialBuffer.prototype.pushNumberAsUint64 = function (v) {\n        this.pushUint32(v >>> 0);\n        this.pushUint32(Math.floor(v / 4294967296) >>> 0);\n    };\n    /**\n     * Get a `uint64` as a `number`. *Caution*: `number` only has 53 bits of precision; some values will change.\n     * `numeric.binaryToDecimal(serialBuffer.getUint8Array(8))` recommended instead\n     */\n    SerialBuffer.prototype.getUint64AsNumber = function () {\n        var low = this.getUint32();\n        var high = this.getUint32();\n        return (high >>> 0) * 4294967296 + (low >>> 0);\n    };\n    /** Append a `varuint32` */\n    SerialBuffer.prototype.pushVaruint32 = function (v) {\n        while (true) {\n            if (v >>> 7) {\n                this.push(0x80 | (v & 0x7f));\n                v = v >>> 7;\n            }\n            else {\n                this.push(v);\n                break;\n            }\n        }\n    };\n    /** Get a `varuint32` */\n    SerialBuffer.prototype.getVaruint32 = function () {\n        var v = 0;\n        var bit = 0;\n        while (true) {\n            var b = this.get();\n            v |= (b & 0x7f) << bit;\n            bit += 7;\n            if (!(b & 0x80)) {\n                break;\n            }\n        }\n        return v >>> 0;\n    };\n    /** Append a `varint32` */\n    SerialBuffer.prototype.pushVarint32 = function (v) {\n        this.pushVaruint32((v << 1) ^ (v >> 31));\n    };\n    /** Get a `varint32` */\n    SerialBuffer.prototype.getVarint32 = function () {\n        var v = this.getVaruint32();\n        if (v & 1) {\n            return ((~v) >> 1) | 2147483648;\n        }\n        else {\n            return v >>> 1;\n        }\n    };\n    /** Append a `float32` */\n    SerialBuffer.prototype.pushFloat32 = function (v) {\n        this.pushArray(new Uint8Array((new Float32Array([v])).buffer));\n    };\n    /** Get a `float32` */\n    SerialBuffer.prototype.getFloat32 = function () {\n        return new Float32Array(this.getUint8Array(4).slice().buffer)[0];\n    };\n    /** Append a `float64` */\n    SerialBuffer.prototype.pushFloat64 = function (v) {\n        this.pushArray(new Uint8Array((new Float64Array([v])).buffer));\n    };\n    /** Get a `float64` */\n    SerialBuffer.prototype.getFloat64 = function () {\n        return new Float64Array(this.getUint8Array(8).slice().buffer)[0];\n    };\n    /** Append a `name` */\n    SerialBuffer.prototype.pushName = function (s) {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing name');\n        }\n        function charToSymbol(c) {\n            if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {\n                return (c - 'a'.charCodeAt(0)) + 6;\n            }\n            if (c >= '1'.charCodeAt(0) && c <= '5'.charCodeAt(0)) {\n                return (c - '1'.charCodeAt(0)) + 1;\n            }\n            return 0;\n        }\n        var a = new Uint8Array(8);\n        var bit = 63;\n        for (var i = 0; i < s.length; ++i) {\n            var c = charToSymbol(s.charCodeAt(i));\n            if (bit < 5) {\n                c = c << 1;\n            }\n            for (var j = 4; j >= 0; --j) {\n                if (bit >= 0) {\n                    a[Math.floor(bit / 8)] |= ((c >> j) & 1) << (bit % 8);\n                    --bit;\n                }\n            }\n        }\n        this.pushArray(a);\n    };\n    /** Get a `name` */\n    SerialBuffer.prototype.getName = function () {\n        var a = this.getUint8Array(8);\n        var result = '';\n        for (var bit = 63; bit >= 0;) {\n            var c = 0;\n            for (var i = 0; i < 5; ++i) {\n                if (bit >= 0) {\n                    c = (c << 1) | ((a[Math.floor(bit / 8)] >> (bit % 8)) & 1);\n                    --bit;\n                }\n            }\n            if (c >= 6) {\n                result += String.fromCharCode(c + 'a'.charCodeAt(0) - 6);\n            }\n            else if (c >= 1) {\n                result += String.fromCharCode(c + '1'.charCodeAt(0) - 1);\n            }\n            else {\n                result += '.';\n            }\n        }\n        while (result.endsWith('.')) {\n            result = result.substr(0, result.length - 1);\n        }\n        return result;\n    };\n    /** Append length-prefixed binary data */\n    SerialBuffer.prototype.pushBytes = function (v) {\n        this.pushVaruint32(v.length);\n        this.pushArray(v);\n    };\n    /** Get length-prefixed binary data */\n    SerialBuffer.prototype.getBytes = function () {\n        return this.getUint8Array(this.getVaruint32());\n    };\n    /** Append a string */\n    SerialBuffer.prototype.pushString = function (v) {\n        this.pushBytes(this.textEncoder.encode(v));\n    };\n    /** Get a string */\n    SerialBuffer.prototype.getString = function () {\n        return this.textDecoder.decode(this.getBytes());\n    };\n    /** Append a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    SerialBuffer.prototype.pushSymbolCode = function (name) {\n        if (typeof name !== 'string') {\n            throw new Error('Expected string containing symbol_code');\n        }\n        var a = [];\n        a.push.apply(a, __spread(this.textEncoder.encode(name)));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    };\n    /** Get a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */\n    SerialBuffer.prototype.getSymbolCode = function () {\n        var a = this.getUint8Array(8);\n        var len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return name;\n    };\n    /** Append a `symbol` */\n    SerialBuffer.prototype.pushSymbol = function (_a) {\n        var name = _a.name, precision = _a.precision;\n        var a = [precision & 0xff];\n        a.push.apply(a, __spread(this.textEncoder.encode(name)));\n        while (a.length < 8) {\n            a.push(0);\n        }\n        this.pushArray(a.slice(0, 8));\n    };\n    /** Get a `symbol` */\n    SerialBuffer.prototype.getSymbol = function () {\n        var precision = this.get();\n        var a = this.getUint8Array(7);\n        var len;\n        for (len = 0; len < a.length; ++len) {\n            if (!a[len]) {\n                break;\n            }\n        }\n        var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));\n        return { name: name, precision: precision };\n    };\n    /** Append an asset */\n    SerialBuffer.prototype.pushAsset = function (s) {\n        if (typeof s !== 'string') {\n            throw new Error('Expected string containing asset');\n        }\n        s = s.trim();\n        var pos = 0;\n        var amount = '';\n        var precision = 0;\n        if (s[pos] === '-') {\n            amount += '-';\n            ++pos;\n        }\n        var foundDigit = false;\n        while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n            foundDigit = true;\n            amount += s[pos];\n            ++pos;\n        }\n        if (!foundDigit) {\n            throw new Error('Asset must begin with a number');\n        }\n        if (s[pos] === '.') {\n            ++pos;\n            while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {\n                amount += s[pos];\n                ++precision;\n                ++pos;\n            }\n        }\n        var name = s.substr(pos).trim();\n        this.pushArray(numeric.signedDecimalToBinary(8, amount));\n        this.pushSymbol({ name: name, precision: precision });\n    };\n    /** Get an asset */\n    SerialBuffer.prototype.getAsset = function () {\n        var amount = this.getUint8Array(8);\n        var _a = this.getSymbol(), name = _a.name, precision = _a.precision;\n        var s = numeric.signedBinaryToDecimal(amount, precision + 1);\n        if (precision) {\n            s = s.substr(0, s.length - precision) + '.' + s.substr(s.length - precision);\n        }\n        return s + ' ' + name;\n    };\n    /** Append a public key */\n    SerialBuffer.prototype.pushPublicKey = function (s) {\n        var key = numeric.stringToPublicKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    };\n    /** Get a public key */\n    SerialBuffer.prototype.getPublicKey = function () {\n        var type = this.get();\n        var data = this.getUint8Array(numeric.publicKeyDataSize);\n        return numeric.publicKeyToString({ type: type, data: data });\n    };\n    /** Append a private key */\n    SerialBuffer.prototype.pushPrivateKey = function (s) {\n        var key = numeric.stringToPrivateKey(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    };\n    /** Get a private key */\n    SerialBuffer.prototype.getPrivateKey = function () {\n        var type = this.get();\n        var data = this.getUint8Array(numeric.privateKeyDataSize);\n        return numeric.privateKeyToString({ type: type, data: data });\n    };\n    /** Append a signature */\n    SerialBuffer.prototype.pushSignature = function (s) {\n        var key = numeric.stringToSignature(s);\n        this.push(key.type);\n        this.pushArray(key.data);\n    };\n    /** Get a signature */\n    SerialBuffer.prototype.getSignature = function () {\n        var type = this.get();\n        var data = this.getUint8Array(numeric.signatureDataSize);\n        return numeric.signatureToString({ type: type, data: data });\n    };\n    return SerialBuffer;\n}()); // SerialBuffer\nexports.SerialBuffer = SerialBuffer;\n/** Is this a supported ABI version? */\nfunction supportedAbiVersion(version) {\n    return version.startsWith('eosio::abi/1.');\n}\nexports.supportedAbiVersion = supportedAbiVersion;\nfunction checkDateParse(date) {\n    var result = Date.parse(date);\n    if (Number.isNaN(result)) {\n        throw new Error('Invalid time format');\n    }\n    return result;\n}\n/** Convert date in ISO format to `time_point` (miliseconds since epoch) */\nfunction dateToTimePoint(date) {\n    return Math.round(checkDateParse(date + 'Z') * 1000);\n}\nexports.dateToTimePoint = dateToTimePoint;\n/** Convert `time_point` (miliseconds since epoch) to date in ISO format */\nfunction timePointToDate(us) {\n    var s = (new Date(us / 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n}\nexports.timePointToDate = timePointToDate;\n/** Convert date in ISO format to `time_point_sec` (seconds since epoch) */\nfunction dateToTimePointSec(date) {\n    return Math.round(checkDateParse(date + 'Z') / 1000);\n}\nexports.dateToTimePointSec = dateToTimePointSec;\n/** Convert `time_point_sec` (seconds since epoch) to to date in ISO format */\nfunction timePointSecToDate(sec) {\n    var s = (new Date(sec * 1000)).toISOString();\n    return s.substr(0, s.length - 1);\n}\nexports.timePointSecToDate = timePointSecToDate;\n/** Convert date in ISO format to `block_timestamp_type` (half-seconds since a different epoch) */\nfunction dateToBlockTimestamp(date) {\n    return Math.round((checkDateParse(date + 'Z') - 946684800000) / 500);\n}\nexports.dateToBlockTimestamp = dateToBlockTimestamp;\n/** Convert `block_timestamp_type` (half-seconds since a different epoch) to to date in ISO format */\nfunction blockTimestampToDate(slot) {\n    var s = (new Date(slot * 500 + 946684800000)).toISOString();\n    return s.substr(0, s.length - 1);\n}\nexports.blockTimestampToDate = blockTimestampToDate;\n/** Convert `string` to `Symbol`. format: `precision,NAME`. */\nfunction stringToSymbol(s) {\n    if (typeof s !== 'string') {\n        throw new Error('Expected string containing symbol');\n    }\n    var m = s.match(/^([0-9]+),([A-Z]+)$/);\n    if (!m) {\n        throw new Error('Invalid symbol');\n    }\n    return { name: m[2], precision: +m[1] };\n}\nexports.stringToSymbol = stringToSymbol;\n/** Convert `Symbol` to `string`. format: `precision,NAME`. */\nfunction symbolToString(_a) {\n    var name = _a.name, precision = _a.precision;\n    return precision + ',' + name;\n}\nexports.symbolToString = symbolToString;\n/** Convert binary data to hex */\nfunction arrayToHex(data) {\n    var e_1, _a;\n    var result = '';\n    try {\n        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\n            var x = data_1_1.value;\n            result += ('00' + x.toString(16)).slice(-2);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return result.toUpperCase();\n}\nexports.arrayToHex = arrayToHex;\n/** Convert hex to binary data */\nfunction hexToUint8Array(hex) {\n    if (typeof hex !== 'string') {\n        throw new Error('Expected string containing hex digits');\n    }\n    if (hex.length % 2) {\n        throw new Error('Odd number of hex digits');\n    }\n    var l = hex.length / 2;\n    var result = new Uint8Array(l);\n    for (var i = 0; i < l; ++i) {\n        var x = parseInt(hex.substr(i * 2, 2), 16);\n        if (Number.isNaN(x)) {\n            throw new Error('Expected hex string');\n        }\n        result[i] = x;\n    }\n    return result;\n}\nexports.hexToUint8Array = hexToUint8Array;\nfunction serializeUnknown(buffer, data) {\n    throw new Error('Don\\'t know how to serialize ' + this.name);\n}\nfunction deserializeUnknown(buffer) {\n    throw new Error('Don\\'t know how to deserialize ' + this.name);\n}\nfunction serializeStruct(buffer, data, state, allowExtensions) {\n    if (state === void 0) { state = new SerializerState(); }\n    if (allowExtensions === void 0) { allowExtensions = true; }\n    var e_2, _a;\n    if (typeof data !== 'object') {\n        throw new Error('expected object containing data: ' + JSON.stringify(data));\n    }\n    if (this.base) {\n        this.base.serialize(buffer, data, state, allowExtensions);\n    }\n    try {\n        for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var field = _c.value;\n            if (field.name in data) {\n                if (state.skippedBinaryExtension) {\n                    throw new Error('unexpected ' + this.name + '.' + field.name);\n                }\n                field.type.serialize(buffer, data[field.name], state, allowExtensions && field === this.fields[this.fields.length - 1]);\n            }\n            else {\n                if (allowExtensions && field.type.extensionOf) {\n                    state.skippedBinaryExtension = true;\n                }\n                else {\n                    throw new Error('missing ' + this.name + '.' + field.name + ' (type=' + field.type.name + ')');\n                }\n            }\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n}\nfunction deserializeStruct(buffer, state, allowExtensions) {\n    if (state === void 0) { state = new SerializerState(); }\n    if (allowExtensions === void 0) { allowExtensions = true; }\n    var e_3, _a;\n    var result;\n    if (this.base) {\n        result = this.base.deserialize(buffer, state, allowExtensions);\n    }\n    else {\n        result = {};\n    }\n    try {\n        for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var field = _c.value;\n            if (allowExtensions && field.type.extensionOf && !buffer.haveReadData()) {\n                state.skippedBinaryExtension = true;\n            }\n            else {\n                result[field.name] = field.type.deserialize(buffer, state, allowExtensions);\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    return result;\n}\nfunction serializeVariant(buffer, data, state, allowExtensions) {\n    if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== 'string') {\n        throw new Error('expected variant: [\"type\", value]');\n    }\n    var i = this.fields.findIndex(function (field) { return field.name === data[0]; });\n    if (i < 0) {\n        throw new Error(\"type \\\"\" + data[0] + \"\\\" is not valid for variant\");\n    }\n    buffer.pushVaruint32(i);\n    this.fields[i].type.serialize(buffer, data[1], state, allowExtensions);\n}\nfunction deserializeVariant(buffer, state, allowExtensions) {\n    var i = buffer.getVaruint32();\n    if (i >= this.fields.length) {\n        throw new Error(\"type index \" + i + \" is not valid for variant\");\n    }\n    var field = this.fields[i];\n    return [field.name, field.type.deserialize(buffer, state, allowExtensions)];\n}\nfunction serializeArray(buffer, data, state, allowExtensions) {\n    var e_4, _a;\n    buffer.pushVaruint32(data.length);\n    try {\n        for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {\n            var item = data_2_1.value;\n            this.arrayOf.serialize(buffer, item, state, false);\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n}\nfunction deserializeArray(buffer, state, allowExtensions) {\n    var len = buffer.getVaruint32();\n    var result = [];\n    for (var i = 0; i < len; ++i) {\n        result.push(this.arrayOf.deserialize(buffer, state, false));\n    }\n    return result;\n}\nfunction serializeOptional(buffer, data, state, allowExtensions) {\n    if (data === null || data === undefined) {\n        buffer.push(0);\n    }\n    else {\n        buffer.push(1);\n        this.optionalOf.serialize(buffer, data, state, allowExtensions);\n    }\n}\nfunction deserializeOptional(buffer, state, allowExtensions) {\n    if (buffer.get()) {\n        return this.optionalOf.deserialize(buffer, state, allowExtensions);\n    }\n    else {\n        return null;\n    }\n}\nfunction serializeExtension(buffer, data, state, allowExtensions) {\n    this.extensionOf.serialize(buffer, data, state, allowExtensions);\n}\nfunction deserializeExtension(buffer, state, allowExtensions) {\n    return this.extensionOf.deserialize(buffer, state, allowExtensions);\n}\nfunction createType(attrs) {\n    return __assign({ name: '<missing name>', aliasOfName: '', arrayOf: null, optionalOf: null, extensionOf: null, baseName: '', base: null, fields: [], serialize: serializeUnknown, deserialize: deserializeUnknown }, attrs);\n}\nfunction checkRange(orig, converted) {\n    if (Number.isNaN(+orig) || Number.isNaN(+converted) || (typeof orig !== 'number' && typeof orig !== 'string')) {\n        throw new Error('Expected number');\n    }\n    if (+orig !== +converted) {\n        throw new Error('Number is out of range');\n    }\n    return +orig;\n}\n/** Create the set of types built-in to the abi format */\nfunction createInitialTypes() {\n    var result = new Map(Object.entries({\n        bool: createType({\n            name: 'bool',\n            serialize: function (buffer, data) {\n                if (typeof data !== 'boolean') {\n                    throw new Error('Expected true or false');\n                }\n                buffer.push(data ? 1 : 0);\n            },\n            deserialize: function (buffer) { return !!buffer.get(); },\n        }),\n        uint8: createType({\n            name: 'uint8',\n            serialize: function (buffer, data) { buffer.push(checkRange(data, data & 0xff)); },\n            deserialize: function (buffer) { return buffer.get(); },\n        }),\n        int8: createType({\n            name: 'int8',\n            serialize: function (buffer, data) { buffer.push(checkRange(data, data << 24 >> 24)); },\n            deserialize: function (buffer) { return buffer.get() << 24 >> 24; },\n        }),\n        uint16: createType({\n            name: 'uint16',\n            serialize: function (buffer, data) { buffer.pushUint16(checkRange(data, data & 0xffff)); },\n            deserialize: function (buffer) { return buffer.getUint16(); },\n        }),\n        int16: createType({\n            name: 'int16',\n            serialize: function (buffer, data) { buffer.pushUint16(checkRange(data, data << 16 >> 16)); },\n            deserialize: function (buffer) { return buffer.getUint16() << 16 >> 16; },\n        }),\n        uint32: createType({\n            name: 'uint32',\n            serialize: function (buffer, data) { buffer.pushUint32(checkRange(data, data >>> 0)); },\n            deserialize: function (buffer) { return buffer.getUint32(); },\n        }),\n        uint64: createType({\n            name: 'uint64',\n            serialize: function (buffer, data) {\n                buffer.pushArray(numeric.decimalToBinary(8, '' + data));\n            },\n            deserialize: function (buffer) { return numeric.binaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int64: createType({\n            name: 'int64',\n            serialize: function (buffer, data) {\n                buffer.pushArray(numeric.signedDecimalToBinary(8, '' + data));\n            },\n            deserialize: function (buffer) { return numeric.signedBinaryToDecimal(buffer.getUint8Array(8)); },\n        }),\n        int32: createType({\n            name: 'int32',\n            serialize: function (buffer, data) { buffer.pushUint32(checkRange(data, data | 0)); },\n            deserialize: function (buffer) { return buffer.getUint32() | 0; },\n        }),\n        varuint32: createType({\n            name: 'varuint32',\n            serialize: function (buffer, data) { buffer.pushVaruint32(checkRange(data, data >>> 0)); },\n            deserialize: function (buffer) { return buffer.getVaruint32(); },\n        }),\n        varint32: createType({\n            name: 'varint32',\n            serialize: function (buffer, data) { buffer.pushVarint32(checkRange(data, data | 0)); },\n            deserialize: function (buffer) { return buffer.getVarint32(); },\n        }),\n        uint128: createType({\n            name: 'uint128',\n            serialize: function (buffer, data) { buffer.pushArray(numeric.decimalToBinary(16, '' + data)); },\n            deserialize: function (buffer) { return numeric.binaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        int128: createType({\n            name: 'int128',\n            serialize: function (buffer, data) {\n                buffer.pushArray(numeric.signedDecimalToBinary(16, '' + data));\n            },\n            deserialize: function (buffer) { return numeric.signedBinaryToDecimal(buffer.getUint8Array(16)); },\n        }),\n        float32: createType({\n            name: 'float32',\n            serialize: function (buffer, data) { buffer.pushFloat32(data); },\n            deserialize: function (buffer) { return buffer.getFloat32(); },\n        }),\n        float64: createType({\n            name: 'float64',\n            serialize: function (buffer, data) { buffer.pushFloat64(data); },\n            deserialize: function (buffer) { return buffer.getFloat64(); },\n        }),\n        float128: createType({\n            name: 'float128',\n            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 16); },\n            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(16)); },\n        }),\n        bytes: createType({\n            name: 'bytes',\n            serialize: function (buffer, data) {\n                if (data instanceof Uint8Array || Array.isArray(data)) {\n                    buffer.pushBytes(data);\n                }\n                else {\n                    buffer.pushBytes(hexToUint8Array(data));\n                }\n            },\n            deserialize: function (buffer, state) {\n                if (state && state.options.bytesAsUint8Array) {\n                    return buffer.getBytes();\n                }\n                else {\n                    return arrayToHex(buffer.getBytes());\n                }\n            },\n        }),\n        string: createType({\n            name: 'string',\n            serialize: function (buffer, data) { buffer.pushString(data); },\n            deserialize: function (buffer) { return buffer.getString(); },\n        }),\n        name: createType({\n            name: 'name',\n            serialize: function (buffer, data) { buffer.pushName(data); },\n            deserialize: function (buffer) { return buffer.getName(); },\n        }),\n        time_point: createType({\n            name: 'time_point',\n            serialize: function (buffer, data) { buffer.pushNumberAsUint64(dateToTimePoint(data)); },\n            deserialize: function (buffer) { return timePointToDate(buffer.getUint64AsNumber()); },\n        }),\n        time_point_sec: createType({\n            name: 'time_point_sec',\n            serialize: function (buffer, data) { buffer.pushUint32(dateToTimePointSec(data)); },\n            deserialize: function (buffer) { return timePointSecToDate(buffer.getUint32()); },\n        }),\n        block_timestamp_type: createType({\n            name: 'block_timestamp_type',\n            serialize: function (buffer, data) { buffer.pushUint32(dateToBlockTimestamp(data)); },\n            deserialize: function (buffer) { return blockTimestampToDate(buffer.getUint32()); },\n        }),\n        symbol_code: createType({\n            name: 'symbol_code',\n            serialize: function (buffer, data) { buffer.pushSymbolCode(data); },\n            deserialize: function (buffer) { return buffer.getSymbolCode(); },\n        }),\n        symbol: createType({\n            name: 'symbol',\n            serialize: function (buffer, data) { buffer.pushSymbol(stringToSymbol(data)); },\n            deserialize: function (buffer) { return symbolToString(buffer.getSymbol()); },\n        }),\n        asset: createType({\n            name: 'asset',\n            serialize: function (buffer, data) { buffer.pushAsset(data); },\n            deserialize: function (buffer) { return buffer.getAsset(); },\n        }),\n        checksum160: createType({\n            name: 'checksum160',\n            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 20); },\n            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(20)); },\n        }),\n        checksum256: createType({\n            name: 'checksum256',\n            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 32); },\n            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(32)); },\n        }),\n        checksum512: createType({\n            name: 'checksum512',\n            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 64); },\n            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(64)); },\n        }),\n        public_key: createType({\n            name: 'public_key',\n            serialize: function (buffer, data) { buffer.pushPublicKey(data); },\n            deserialize: function (buffer) { return buffer.getPublicKey(); },\n        }),\n        private_key: createType({\n            name: 'private_key',\n            serialize: function (buffer, data) { buffer.pushPrivateKey(data); },\n            deserialize: function (buffer) { return buffer.getPrivateKey(); },\n        }),\n        signature: createType({\n            name: 'signature',\n            serialize: function (buffer, data) { buffer.pushSignature(data); },\n            deserialize: function (buffer) { return buffer.getSignature(); },\n        }),\n    }));\n    result.set('extended_asset', createType({\n        name: 'extended_asset',\n        baseName: '',\n        fields: [\n            { name: 'quantity', typeName: 'asset', type: result.get('asset') },\n            { name: 'contract', typeName: 'name', type: result.get('name') },\n        ],\n        serialize: serializeStruct,\n        deserialize: deserializeStruct,\n    }));\n    return result;\n} // createInitialTypes()\nexports.createInitialTypes = createInitialTypes;\n/** Get type from `types` */\nfunction getType(types, name) {\n    var type = types.get(name);\n    if (type && type.aliasOfName) {\n        return getType(types, type.aliasOfName);\n    }\n    if (type) {\n        return type;\n    }\n    if (name.endsWith('[]')) {\n        return createType({\n            name: name,\n            arrayOf: getType(types, name.substr(0, name.length - 2)),\n            serialize: serializeArray,\n            deserialize: deserializeArray,\n        });\n    }\n    if (name.endsWith('?')) {\n        return createType({\n            name: name,\n            optionalOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeOptional,\n            deserialize: deserializeOptional,\n        });\n    }\n    if (name.endsWith('$')) {\n        return createType({\n            name: name,\n            extensionOf: getType(types, name.substr(0, name.length - 1)),\n            serialize: serializeExtension,\n            deserialize: deserializeExtension,\n        });\n    }\n    throw new Error('Unknown type: ' + name);\n}\nexports.getType = getType;\n/**\n * Get types from abi\n * @param initialTypes Set of types to build on.\n *     In most cases, it's best to fill this from a fresh call to `getTypesFromAbi()`.\n */\nfunction getTypesFromAbi(initialTypes, abi) {\n    var e_5, _a, e_6, _b, e_7, _c, e_8, _d, e_9, _e;\n    var types = new Map(initialTypes);\n    if (abi.types) {\n        try {\n            for (var _f = __values(abi.types), _g = _f.next(); !_g.done; _g = _f.next()) {\n                var _h = _g.value, new_type_name = _h.new_type_name, type = _h.type;\n                types.set(new_type_name, createType({ name: new_type_name, aliasOfName: type }));\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n    }\n    if (abi.structs) {\n        try {\n            for (var _j = __values(abi.structs), _k = _j.next(); !_k.done; _k = _j.next()) {\n                var _l = _k.value, name_1 = _l.name, base = _l.base, fields = _l.fields;\n                types.set(name_1, createType({\n                    name: name_1,\n                    baseName: base,\n                    fields: fields.map(function (_a) {\n                        var n = _a.name, type = _a.type;\n                        return ({ name: n, typeName: type, type: null });\n                    }),\n                    serialize: serializeStruct,\n                    deserialize: deserializeStruct,\n                }));\n            }\n        }\n        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n        finally {\n            try {\n                if (_k && !_k.done && (_b = _j.return)) _b.call(_j);\n            }\n            finally { if (e_6) throw e_6.error; }\n        }\n    }\n    if (abi.variants) {\n        try {\n            for (var _m = __values(abi.variants), _o = _m.next(); !_o.done; _o = _m.next()) {\n                var _p = _o.value, name_2 = _p.name, t = _p.types;\n                types.set(name_2, createType({\n                    name: name_2,\n                    fields: t.map(function (s) { return ({ name: s, typeName: s, type: null }); }),\n                    serialize: serializeVariant,\n                    deserialize: deserializeVariant,\n                }));\n            }\n        }\n        catch (e_7_1) { e_7 = { error: e_7_1 }; }\n        finally {\n            try {\n                if (_o && !_o.done && (_c = _m.return)) _c.call(_m);\n            }\n            finally { if (e_7) throw e_7.error; }\n        }\n    }\n    try {\n        for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {\n            var _q = __read(types_1_1.value, 2), name_3 = _q[0], type = _q[1];\n            if (type.baseName) {\n                type.base = getType(types, type.baseName);\n            }\n            try {\n                for (var _r = __values(type.fields), _s = _r.next(); !_s.done; _s = _r.next()) {\n                    var field = _s.value;\n                    field.type = getType(types, field.typeName);\n                }\n            }\n            catch (e_9_1) { e_9 = { error: e_9_1 }; }\n            finally {\n                try {\n                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);\n                }\n                finally { if (e_9) throw e_9.error; }\n            }\n        }\n    }\n    catch (e_8_1) { e_8 = { error: e_8_1 }; }\n    finally {\n        try {\n            if (types_1_1 && !types_1_1.done && (_d = types_1.return)) _d.call(types_1);\n        }\n        finally { if (e_8) throw e_8.error; }\n    }\n    return types;\n} // getTypesFromAbi\nexports.getTypesFromAbi = getTypesFromAbi;\n/** TAPoS: Return transaction fields which reference `refBlock` and expire `expireSeconds` after `refBlock.timestamp` */\nfunction transactionHeader(refBlock, expireSeconds) {\n    return {\n        expiration: timePointSecToDate(dateToTimePointSec(refBlock.timestamp) + expireSeconds),\n        ref_block_num: refBlock.block_num & 0xffff,\n        ref_block_prefix: refBlock.ref_block_prefix,\n    };\n}\nexports.transactionHeader = transactionHeader;\n/** Convert action data to serialized form (hex) */\nfunction serializeActionData(contract, account, name, data, textEncoder, textDecoder) {\n    var action = contract.actions.get(name);\n    if (!action) {\n        throw new Error(\"Unknown action \" + name + \" in contract \" + account);\n    }\n    var buffer = new SerialBuffer({ textEncoder: textEncoder, textDecoder: textDecoder });\n    action.serialize(buffer, data);\n    return arrayToHex(buffer.asUint8Array());\n}\nexports.serializeActionData = serializeActionData;\n/** Return action in serialized form */\nfunction serializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {\n    return {\n        account: account,\n        name: name,\n        authorization: authorization,\n        data: serializeActionData(contract, account, name, data, textEncoder, textDecoder),\n    };\n}\nexports.serializeAction = serializeAction;\n/** Deserialize action data. If `data` is a `string`, then it's assumed to be in hex. */\nfunction deserializeActionData(contract, account, name, data, textEncoder, textDecoder) {\n    var action = contract.actions.get(name);\n    if (typeof data === 'string') {\n        data = hexToUint8Array(data);\n    }\n    if (!action) {\n        throw new Error(\"Unknown action \" + name + \" in contract \" + account);\n    }\n    var buffer = new SerialBuffer({ textDecoder: textDecoder, textEncoder: textEncoder });\n    buffer.pushArray(data);\n    return action.deserialize(buffer);\n}\nexports.deserializeActionData = deserializeActionData;\n/** Deserialize action. If `data` is a `string`, then it's assumed to be in hex. */\nfunction deserializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {\n    return {\n        account: account,\n        name: name,\n        authorization: authorization,\n        data: deserializeActionData(contract, account, name, data, textEncoder, textDecoder),\n    };\n}\nexports.deserializeAction = deserializeAction;\n//# sourceMappingURL=eosjs-serialize.js.map"]},"metadata":{},"sourceType":"script"}