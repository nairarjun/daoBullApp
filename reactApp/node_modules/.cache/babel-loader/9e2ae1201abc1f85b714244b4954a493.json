{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha256 = exports.generateKeyPair = exports.constructElliptic = void 0;\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar hash = require(\"hash.js\");\n\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\n\nvar PublicKey_1 = require(\"./PublicKey\");\n\nvar PrivateKey_1 = require(\"./PrivateKey\");\n\nvar PrivateKey_2 = require(\"./PrivateKey\");\n\nObject.defineProperty(exports, \"PrivateKey\", {\n  enumerable: true,\n  get: function () {\n    return PrivateKey_2.PrivateKey;\n  }\n});\n\nvar PublicKey_2 = require(\"./PublicKey\");\n\nObject.defineProperty(exports, \"PublicKey\", {\n  enumerable: true,\n  get: function () {\n    return PublicKey_2.PublicKey;\n  }\n});\n\nvar Signature_1 = require(\"./Signature\");\n\nObject.defineProperty(exports, \"Signature\", {\n  enumerable: true,\n  get: function () {\n    return Signature_1.Signature;\n  }\n});\n/** Construct the elliptic curve object based on key type */\n\nexports.constructElliptic = function (type) {\n  if (type === eosjs_numeric_1.KeyType.k1) {\n    return new elliptic_1.ec('secp256k1');\n  }\n\n  return new elliptic_1.ec('p256');\n};\n\nexports.generateKeyPair = function (type, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (!options.secureEnv) {\n    throw new Error('Key generation is completely INSECURE in production environments in the browser. ' + 'If you are absolutely certain this does NOT describe your environment, set `secureEnv` in your ' + 'options to `true`.  If this does describe your environment and you set `secureEnv` to `true`, ' + 'YOU DO SO AT YOUR OWN RISK AND THE RISK OF YOUR USERS.');\n  }\n\n  var ec;\n\n  if (type === eosjs_numeric_1.KeyType.k1) {\n    ec = new elliptic_1.ec('secp256k1');\n  } else {\n    ec = new elliptic_1.ec('p256');\n  }\n\n  var ellipticKeyPair = ec.genKeyPair(options.ecOptions);\n  var publicKey = PublicKey_1.PublicKey.fromElliptic(ellipticKeyPair, type, ec);\n  var privateKey = PrivateKey_1.PrivateKey.fromElliptic(ellipticKeyPair, type, ec);\n  return {\n    publicKey: publicKey,\n    privateKey: privateKey\n  };\n};\n\nexports.sha256 = function (data) {\n  return hash.sha256().update(data).digest();\n};","map":{"version":3,"sources":["../src/eosjs-key-conversions.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,IAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,YAAA,CAAA,UAAA;AAAU;AAAV,CAAA;;AACT,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,WAAA,CAAA,SAAA;AAAS;AAAT,CAAA;;AACT,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,WAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,WAAA,CAAA,SAAA;AAAS;AAAT,CAAA;AAET;;AACa,OAAA,CAAA,iBAAA,GAAoB,UAAC,IAAD,EAAc;AAC3C,MAAI,IAAI,KAAK,eAAA,CAAA,OAAA,CAAQ,EAArB,EAAyB;AACrB,WAAO,IAAI,UAAA,CAAA,EAAJ,CAAO,WAAP,CAAP;AACH;;AACD,SAAO,IAAI,UAAA,CAAA,EAAJ,CAAO,MAAP,CAAP;AACH,CALY;;AAOA,OAAA,CAAA,eAAA,GAAkB,UAC3B,IAD2B,EACZ,OADY,EAC2D;AAAvE,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAuE;;AAEtF,MAAI,CAAC,OAAO,CAAC,SAAb,EAAwB;AACpB,UAAM,IAAI,KAAJ,CAAU,sFACZ,iGADY,GAEZ,gGAFY,GAGZ,wDAHE,CAAN;AAIH;;AACD,MAAI,EAAJ;;AACA,MAAI,IAAI,KAAK,eAAA,CAAA,OAAA,CAAQ,EAArB,EAAyB;AACrB,IAAA,EAAE,GAAG,IAAI,UAAA,CAAA,EAAJ,CAAO,WAAP,CAAL;AACH,GAFD,MAEO;AACH,IAAA,EAAE,GAAG,IAAI,UAAA,CAAA,EAAJ,CAAO,MAAP,CAAL;AACH;;AACD,MAAM,eAAe,GAAG,EAAE,CAAC,UAAH,CAAc,OAAO,CAAC,SAAtB,CAAxB;AACA,MAAM,SAAS,GAAG,WAAA,CAAA,SAAA,CAAU,YAAV,CAAuB,eAAvB,EAAwC,IAAxC,EAA8C,EAA9C,CAAlB;AACA,MAAM,UAAU,GAAG,YAAA,CAAA,UAAA,CAAW,YAAX,CAAwB,eAAxB,EAAyC,IAAzC,EAA+C,EAA/C,CAAnB;AACA,SAAO;AAAC,IAAA,SAAS,EAAA,SAAV;AAAY,IAAA,UAAU,EAAA;AAAtB,GAAP;AACH,CAnBY;;AAqBA,OAAA,CAAA,MAAA,GAAS,UAAC,IAAD,EAAoB;AACtC,SAAO,IAAI,CAAC,MAAL,GAAc,MAAd,CAAqB,IAArB,EAA2B,MAA3B,EAAP;AACH,CAFY","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = exports.generateKeyPair = exports.constructElliptic = void 0;\nvar elliptic_1 = require(\"elliptic\");\nvar hash = require(\"hash.js\");\nvar eosjs_numeric_1 = require(\"./eosjs-numeric\");\nvar PublicKey_1 = require(\"./PublicKey\");\nvar PrivateKey_1 = require(\"./PrivateKey\");\nvar PrivateKey_2 = require(\"./PrivateKey\");\nObject.defineProperty(exports, \"PrivateKey\", { enumerable: true, get: function () { return PrivateKey_2.PrivateKey; } });\nvar PublicKey_2 = require(\"./PublicKey\");\nObject.defineProperty(exports, \"PublicKey\", { enumerable: true, get: function () { return PublicKey_2.PublicKey; } });\nvar Signature_1 = require(\"./Signature\");\nObject.defineProperty(exports, \"Signature\", { enumerable: true, get: function () { return Signature_1.Signature; } });\n/** Construct the elliptic curve object based on key type */\nexports.constructElliptic = function (type) {\n    if (type === eosjs_numeric_1.KeyType.k1) {\n        return new elliptic_1.ec('secp256k1');\n    }\n    return new elliptic_1.ec('p256');\n};\nexports.generateKeyPair = function (type, options) {\n    if (options === void 0) { options = {}; }\n    if (!options.secureEnv) {\n        throw new Error('Key generation is completely INSECURE in production environments in the browser. ' +\n            'If you are absolutely certain this does NOT describe your environment, set `secureEnv` in your ' +\n            'options to `true`.  If this does describe your environment and you set `secureEnv` to `true`, ' +\n            'YOU DO SO AT YOUR OWN RISK AND THE RISK OF YOUR USERS.');\n    }\n    var ec;\n    if (type === eosjs_numeric_1.KeyType.k1) {\n        ec = new elliptic_1.ec('secp256k1');\n    }\n    else {\n        ec = new elliptic_1.ec('p256');\n    }\n    var ellipticKeyPair = ec.genKeyPair(options.ecOptions);\n    var publicKey = PublicKey_1.PublicKey.fromElliptic(ellipticKeyPair, type, ec);\n    var privateKey = PrivateKey_1.PrivateKey.fromElliptic(ellipticKeyPair, type, ec);\n    return { publicKey: publicKey, privateKey: privateKey };\n};\nexports.sha256 = function (data) {\n    return hash.sha256().update(data).digest();\n};\n//# sourceMappingURL=eosjs-key-conversions.js.map"]},"metadata":{},"sourceType":"script"}