{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Anchor = void 0;\n\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\n\nconst anchor_link_1 = __importDefault(require(\"anchor-link\"));\n\nconst eosjs_1 = require(\"eosjs\");\n\nconst eosio_1 = require(\"@greymass/eosio\");\n\nconst interfaces_1 = require(\"./interfaces\");\n\nconst AnchorUser_1 = require(\"./AnchorUser\");\n\nconst AnchorLogo_1 = require(\"./AnchorLogo\");\n\nconst UALAnchorError_1 = require(\"./UALAnchorError\");\n\nconst anchor_link_browser_transport_1 = __importDefault(require(\"anchor-link-browser-transport\"));\n\nclass Anchor extends universal_authenticator_library_1.Authenticator {\n  /**\n   * Anchor Constructor.\n   *\n   * @param chains\n   * @param options { appName } appName is a required option to use Scatter\n   */\n  constructor(chains, options) {\n    super(chains); // Storage for AnchorUser instances\n\n    this.users = []; // the callback service url, defaults to https://cb.anchor.link\n\n    this.service = 'https://cb.anchor.link'; // disable Greymass Fuel cosigning, defaults to false\n\n    this.disableGreymassFuel = false; // display the request status returned by anchor-link, defaults to false (ual has it's own)\n\n    this.requestStatus = false; // The referral account used in Fuel transactions\n\n    this.fuelReferrer = 'teamgreymass'; // Whether anchor-link should be configured to verify identity proofs in the browser for the app\n\n    this.verifyProofs = false; // Establish initial values\n\n    this.chainId = chains[0].chainId;\n    this.users = []; // Determine the default rpc endpoint for this chain\n\n    const [chain] = chains;\n    const [rpc] = chain.rpcEndpoints; // Ensure the appName is set properly\n\n    if (options && options.appName) {\n      this.appName = options.appName;\n    } else {\n      throw new UALAnchorError_1.UALAnchorError('ual-anchor requires the appName property to be set on the `options` argument during initialization.', universal_authenticator_library_1.UALErrorType.Initialization, null);\n    } // Allow overriding the JsonRpc client via options\n\n\n    if (options && options.rpc) {\n      this.rpc = options.rpc;\n    } else {\n      // otherwise just return a generic rpc instance for this endpoint\n      this.rpc = new eosjs_1.JsonRpc(`${rpc.protocol}://${rpc.host}:${rpc.port}`);\n    } // Allow overriding the APIClient via options\n\n\n    if (options && options.client) {\n      this.client = options.client;\n    } else {\n      const provider = new eosio_1.FetchProvider(`${rpc.protocol}://${rpc.host}:${rpc.port}`);\n      this.client = new eosio_1.APIClient({\n        provider\n      });\n    } // Allow passing a custom service URL to process callbacks\n\n\n    if (options.service) {\n      this.service = options.service;\n    } // Allow passing of disable flag for Greymass Fuel\n\n\n    if (options && options.disableGreymassFuel) {\n      this.disableGreymassFuel = options.disableGreymassFuel;\n    } // Allow passing of disable flag for resulting request status\n\n\n    if (options && options.requestStatus) {\n      this.requestStatus = options.requestStatus;\n    } // Allow specifying a Fuel referral account\n\n\n    if (options && options.fuelReferrer) {\n      this.fuelReferrer = options.fuelReferrer;\n    } // Allow overriding the proof verification option\n\n\n    if (options && options.verifyProofs) {\n      this.verifyProofs = options.verifyProofs;\n    }\n  }\n  /**\n   * Called after `shouldRender` and should be used to handle any async actions required to initialize the authenticator\n   */\n\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // establish anchor-link\n      this.link = new anchor_link_1.default({\n        chains: [{\n          chainId: this.chainId,\n          nodeUrl: this.client\n        }],\n        service: this.service,\n        transport: new anchor_link_browser_transport_1.default({\n          requestStatus: this.requestStatus,\n          disableGreymassFuel: this.disableGreymassFuel,\n          fuelReferrer: this.fuelReferrer\n        }),\n        verifyProofs: this.verifyProofs\n      }); // attempt to restore any existing session for this app\n\n      const session = yield this.link.restoreSession(this.appName);\n\n      if (session) {\n        this.users = [new AnchorUser_1.AnchorUser(this.rpc, this.client, {\n          session\n        })];\n      }\n    });\n  }\n  /**\n   * Resets the authenticator to its initial, default state then calls `init` method\n   */\n\n\n  reset() {\n    this.users = [];\n  }\n  /**\n   * Returns true if the authenticator has errored while initializing.\n   */\n\n\n  isErrored() {\n    return false;\n  }\n  /**\n   * Returns a URL where the user can download and install the underlying authenticator\n   * if it is not found by the UAL Authenticator.\n   */\n\n\n  getOnboardingLink() {\n    return 'https://github.com/greymass/anchor/';\n  }\n  /**\n   * Returns error (if available) if the authenticator has errored while initializing.\n   */\n\n\n  getError() {\n    return null;\n  }\n  /**\n   * Returns true if the authenticator is loading while initializing its internal state.\n   */\n\n\n  isLoading() {\n    return false;\n  }\n\n  getName() {\n    return 'anchor';\n  }\n  /**\n   * Returns the style of the Button that will be rendered.\n   */\n\n\n  getStyle() {\n    return {\n      icon: AnchorLogo_1.AnchorLogo,\n      text: interfaces_1.Name,\n      textColor: 'white',\n      background: '#3650A2'\n    };\n  }\n  /**\n   * Returns whether or not the button should render based on the operating environment and other factors.\n   * ie. If your Authenticator App does not support mobile, it returns false when running in a mobile browser.\n   */\n\n\n  shouldRender() {\n    return !this.isLoading();\n  }\n  /**\n   * Returns whether or not the dapp should attempt to auto login with the Authenticator app.\n   * Auto login will only occur when there is only one Authenticator that returns shouldRender() true and\n   * shouldAutoLogin() true.\n   */\n\n\n  shouldAutoLogin() {\n    return this.users.length > 0;\n  }\n  /**\n   * Returns whether or not the button should show an account name input field.\n   * This is for Authenticators that do not have a concept of account names.\n   */\n\n\n  shouldRequestAccountName() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return false;\n    });\n  }\n  /**\n   * Login using the Authenticator App. This can return one or more users depending on multiple chain support.\n   *\n   * @param accountName  The account name of the user for Authenticators that do not store accounts (optional)\n   */\n\n\n  login() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.chains.length > 1) {\n        throw new UALAnchorError_1.UALAnchorError('UAL-Anchor does not yet support providing multiple chains to UAL. Please initialize the UAL provider with a single chain.', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n      }\n\n      try {\n        // only call the login method if no users exist, to prevent UI from prompting for login during auto login\n        //  some changes to UAL are going to be required to support multiple users\n        if (this.users.length === 0) {\n          const identity = yield this.link.login(this.appName);\n          this.users = [new AnchorUser_1.AnchorUser(this.rpc, this.client, identity)];\n        }\n      } catch (e) {\n        throw new UALAnchorError_1.UALAnchorError(e.message, universal_authenticator_library_1.UALErrorType.Login, e);\n      }\n\n      return this.users;\n    });\n  }\n  /**\n   * Logs the user out of the dapp. This will be strongly dependent on each Authenticator app's patterns.\n   */\n\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // retrieve the current user\n      const [user] = this.users; // retrieve the auth from the current user\n\n      const {\n        session: {\n          auth\n        }\n      } = user; // remove the session from anchor-link\n\n      yield this.link.removeSession(this.appName, auth, this.chainId); // reset the authenticator\n\n      this.reset();\n    });\n  }\n  /**\n   * Returns true if user confirmation is required for `getKeys`\n   */\n\n\n  requiresGetKeyConfirmation() {\n    return false;\n  }\n\n}\n\nexports.Anchor = Anchor;","map":{"version":3,"sources":["/home/turbo/devel/MyGame/contracts/eos-hackathon/decentralize-io-ui/node_modules/ual-anchor/dist/Anchor.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","Anchor","universal_authenticator_library_1","require","anchor_link_1","eosjs_1","eosio_1","interfaces_1","AnchorUser_1","AnchorLogo_1","UALAnchorError_1","anchor_link_browser_transport_1","Authenticator","constructor","chains","options","users","service","disableGreymassFuel","requestStatus","fuelReferrer","verifyProofs","chainId","chain","rpc","rpcEndpoints","appName","UALAnchorError","UALErrorType","Initialization","JsonRpc","protocol","host","port","client","provider","FetchProvider","APIClient","init","link","default","nodeUrl","transport","session","restoreSession","AnchorUser","reset","isErrored","getOnboardingLink","getError","isLoading","getName","getStyle","icon","AnchorLogo","text","Name","textColor","background","shouldRender","shouldAutoLogin","length","shouldRequestAccountName","login","Unsupported","identity","message","Login","logout","user","auth","removeSession","requiresGetKeyConfirmation"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Anchor = void 0;\nconst universal_authenticator_library_1 = require(\"universal-authenticator-library\");\nconst anchor_link_1 = __importDefault(require(\"anchor-link\"));\nconst eosjs_1 = require(\"eosjs\");\nconst eosio_1 = require(\"@greymass/eosio\");\nconst interfaces_1 = require(\"./interfaces\");\nconst AnchorUser_1 = require(\"./AnchorUser\");\nconst AnchorLogo_1 = require(\"./AnchorLogo\");\nconst UALAnchorError_1 = require(\"./UALAnchorError\");\nconst anchor_link_browser_transport_1 = __importDefault(require(\"anchor-link-browser-transport\"));\nclass Anchor extends universal_authenticator_library_1.Authenticator {\n    /**\n     * Anchor Constructor.\n     *\n     * @param chains\n     * @param options { appName } appName is a required option to use Scatter\n     */\n    constructor(chains, options) {\n        super(chains);\n        // Storage for AnchorUser instances\n        this.users = [];\n        // the callback service url, defaults to https://cb.anchor.link\n        this.service = 'https://cb.anchor.link';\n        // disable Greymass Fuel cosigning, defaults to false\n        this.disableGreymassFuel = false;\n        // display the request status returned by anchor-link, defaults to false (ual has it's own)\n        this.requestStatus = false;\n        // The referral account used in Fuel transactions\n        this.fuelReferrer = 'teamgreymass';\n        // Whether anchor-link should be configured to verify identity proofs in the browser for the app\n        this.verifyProofs = false;\n        // Establish initial values\n        this.chainId = chains[0].chainId;\n        this.users = [];\n        // Determine the default rpc endpoint for this chain\n        const [chain] = chains;\n        const [rpc] = chain.rpcEndpoints;\n        // Ensure the appName is set properly\n        if (options && options.appName) {\n            this.appName = options.appName;\n        }\n        else {\n            throw new UALAnchorError_1.UALAnchorError('ual-anchor requires the appName property to be set on the `options` argument during initialization.', universal_authenticator_library_1.UALErrorType.Initialization, null);\n        }\n        // Allow overriding the JsonRpc client via options\n        if (options && options.rpc) {\n            this.rpc = options.rpc;\n        }\n        else {\n            // otherwise just return a generic rpc instance for this endpoint\n            this.rpc = new eosjs_1.JsonRpc(`${rpc.protocol}://${rpc.host}:${rpc.port}`);\n        }\n        // Allow overriding the APIClient via options\n        if (options && options.client) {\n            this.client = options.client;\n        }\n        else {\n            const provider = new eosio_1.FetchProvider(`${rpc.protocol}://${rpc.host}:${rpc.port}`);\n            this.client = new eosio_1.APIClient({ provider });\n        }\n        // Allow passing a custom service URL to process callbacks\n        if (options.service) {\n            this.service = options.service;\n        }\n        // Allow passing of disable flag for Greymass Fuel\n        if (options && options.disableGreymassFuel) {\n            this.disableGreymassFuel = options.disableGreymassFuel;\n        }\n        // Allow passing of disable flag for resulting request status\n        if (options && options.requestStatus) {\n            this.requestStatus = options.requestStatus;\n        }\n        // Allow specifying a Fuel referral account\n        if (options && options.fuelReferrer) {\n            this.fuelReferrer = options.fuelReferrer;\n        }\n        // Allow overriding the proof verification option\n        if (options && options.verifyProofs) {\n            this.verifyProofs = options.verifyProofs;\n        }\n    }\n    /**\n     * Called after `shouldRender` and should be used to handle any async actions required to initialize the authenticator\n     */\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // establish anchor-link\n            this.link = new anchor_link_1.default({\n                chains: [{\n                        chainId: this.chainId,\n                        nodeUrl: this.client,\n                    }],\n                service: this.service,\n                transport: new anchor_link_browser_transport_1.default({\n                    requestStatus: this.requestStatus,\n                    disableGreymassFuel: this.disableGreymassFuel,\n                    fuelReferrer: this.fuelReferrer,\n                }),\n                verifyProofs: this.verifyProofs,\n            });\n            // attempt to restore any existing session for this app\n            const session = yield this.link.restoreSession(this.appName);\n            if (session) {\n                this.users = [new AnchorUser_1.AnchorUser(this.rpc, this.client, { session })];\n            }\n        });\n    }\n    /**\n     * Resets the authenticator to its initial, default state then calls `init` method\n     */\n    reset() {\n        this.users = [];\n    }\n    /**\n     * Returns true if the authenticator has errored while initializing.\n     */\n    isErrored() {\n        return false;\n    }\n    /**\n     * Returns a URL where the user can download and install the underlying authenticator\n     * if it is not found by the UAL Authenticator.\n     */\n    getOnboardingLink() {\n        return 'https://github.com/greymass/anchor/';\n    }\n    /**\n     * Returns error (if available) if the authenticator has errored while initializing.\n     */\n    getError() {\n        return null;\n    }\n    /**\n     * Returns true if the authenticator is loading while initializing its internal state.\n     */\n    isLoading() {\n        return false;\n    }\n    getName() {\n        return 'anchor';\n    }\n    /**\n     * Returns the style of the Button that will be rendered.\n     */\n    getStyle() {\n        return {\n            icon: AnchorLogo_1.AnchorLogo,\n            text: interfaces_1.Name,\n            textColor: 'white',\n            background: '#3650A2'\n        };\n    }\n    /**\n     * Returns whether or not the button should render based on the operating environment and other factors.\n     * ie. If your Authenticator App does not support mobile, it returns false when running in a mobile browser.\n     */\n    shouldRender() {\n        return !this.isLoading();\n    }\n    /**\n     * Returns whether or not the dapp should attempt to auto login with the Authenticator app.\n     * Auto login will only occur when there is only one Authenticator that returns shouldRender() true and\n     * shouldAutoLogin() true.\n     */\n    shouldAutoLogin() {\n        return this.users.length > 0;\n    }\n    /**\n     * Returns whether or not the button should show an account name input field.\n     * This is for Authenticators that do not have a concept of account names.\n     */\n    shouldRequestAccountName() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return false;\n        });\n    }\n    /**\n     * Login using the Authenticator App. This can return one or more users depending on multiple chain support.\n     *\n     * @param accountName  The account name of the user for Authenticators that do not store accounts (optional)\n     */\n    login() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.chains.length > 1) {\n                throw new UALAnchorError_1.UALAnchorError('UAL-Anchor does not yet support providing multiple chains to UAL. Please initialize the UAL provider with a single chain.', universal_authenticator_library_1.UALErrorType.Unsupported, null);\n            }\n            try {\n                // only call the login method if no users exist, to prevent UI from prompting for login during auto login\n                //  some changes to UAL are going to be required to support multiple users\n                if (this.users.length === 0) {\n                    const identity = yield this.link.login(this.appName);\n                    this.users = [new AnchorUser_1.AnchorUser(this.rpc, this.client, identity)];\n                }\n            }\n            catch (e) {\n                throw new UALAnchorError_1.UALAnchorError(e.message, universal_authenticator_library_1.UALErrorType.Login, e);\n            }\n            return this.users;\n        });\n    }\n    /**\n     * Logs the user out of the dapp. This will be strongly dependent on each Authenticator app's patterns.\n     */\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // retrieve the current user\n            const [user] = this.users;\n            // retrieve the auth from the current user\n            const { session: { auth } } = user;\n            // remove the session from anchor-link\n            yield this.link.removeSession(this.appName, auth, this.chainId);\n            // reset the authenticator\n            this.reset();\n        });\n    }\n    /**\n     * Returns true if user confirmation is required for `getKeys`\n     */\n    requiresGetKeyConfirmation() {\n        return false;\n    }\n}\nexports.Anchor = Anchor;\n"]},"metadata":{},"sourceType":"script"}