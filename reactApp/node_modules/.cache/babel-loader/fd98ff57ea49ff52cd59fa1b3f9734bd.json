{"ast":null,"code":"\"use strict\";\n/**\n * @module API\n */\n// copyright defined in eosjs/LICENSE.txt\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ser = require(\"./eosjs-serialize\");\n\nvar abiAbi = require('../src/abi.abi.json');\n\nvar transactionAbi = require('../src/transaction.abi.json');\n\nvar Api =\n/** @class */\nfunction () {\n  /**\n   * @param args\n   *    * `rpc`: Issues RPC calls\n   *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction\n   *    * `abiProvider`: Supplies ABIs in raw form (binary)\n   *    * `signatureProvider`: Signs transactions\n   *    * `chainId`: Identifies chain\n   *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n   *    * `textDecoder`: `TextDecoder` instance to use. Pass in `null` if running in a browser\n   */\n  function Api(args) {\n    /** Holds information needed to serialize contract actions */\n    this.contracts = new Map();\n    /** Fetched abis */\n\n    this.cachedAbis = new Map();\n    this.rpc = args.rpc;\n    this.authorityProvider = args.authorityProvider || args.rpc;\n    this.abiProvider = args.abiProvider || args.rpc;\n    this.signatureProvider = args.signatureProvider;\n    this.chainId = args.chainId;\n    this.textEncoder = args.textEncoder;\n    this.textDecoder = args.textDecoder;\n    this.abiTypes = ser.getTypesFromAbi(ser.createInitialTypes(), abiAbi);\n    this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);\n  }\n  /** Decodes an abi as Uint8Array into json. */\n\n\n  Api.prototype.rawAbiToJson = function (rawAbi) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder,\n      array: rawAbi\n    });\n\n    if (!ser.supportedAbiVersion(buffer.getString())) {\n      throw new Error('Unsupported abi version');\n    }\n\n    buffer.restartRead();\n    return this.abiTypes.get('abi_def').deserialize(buffer);\n  };\n  /** Get abi in both binary and structured forms. Fetch when needed. */\n\n\n  Api.prototype.getCachedAbi = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAbi, rawAbi, abi, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!reload && this.cachedAbis.get(accountName)) {\n              return [2\n              /*return*/\n              , this.cachedAbis.get(accountName)];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.abiProvider.getRawAbi(accountName)];\n\n          case 2:\n            rawAbi = _a.sent().abi;\n            abi = this.rawAbiToJson(rawAbi);\n            cachedAbi = {\n              rawAbi: rawAbi,\n              abi: abi\n            };\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            e_1.message = \"fetching abi for \" + accountName + \": \" + e_1.message;\n            throw e_1;\n\n          case 4:\n            if (!cachedAbi) {\n              throw new Error(\"Missing abi for \" + accountName);\n            }\n\n            this.cachedAbis.set(accountName, cachedAbi);\n            return [2\n            /*return*/\n            , cachedAbi];\n        }\n      });\n    });\n  };\n  /** Get abi in structured form. Fetch when needed. */\n\n\n  Api.prototype.getAbi = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCachedAbi(accountName, reload)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent().abi];\n        }\n      });\n    });\n  };\n  /** Get abis needed by a transaction */\n\n\n  Api.prototype.getTransactionAbis = function (transaction, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts, uniqueAccounts, actionPromises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        accounts = transaction.actions.map(function (action) {\n          return action.account;\n        });\n        uniqueAccounts = new Set(accounts);\n        actionPromises = __spread(uniqueAccounts).map(function (account) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n\n            return __generator(this, function (_b) {\n              switch (_b.label) {\n                case 0:\n                  _a = {\n                    accountName: account\n                  };\n                  return [4\n                  /*yield*/\n                  , this.getCachedAbi(account, reload)];\n\n                case 1:\n                  return [2\n                  /*return*/\n                  , (_a.abi = _b.sent().rawAbi, _a)];\n              }\n            });\n          });\n        });\n        return [2\n        /*return*/\n        , Promise.all(actionPromises)];\n      });\n    });\n  };\n  /** Get data needed to serialize actions in a contract */\n\n\n  Api.prototype.getContract = function (accountName, reload) {\n    if (reload === void 0) {\n      reload = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var e_2, _a, abi, types, actions, _b, _c, _d, name_1, type, result;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!reload && this.contracts.get(accountName)) {\n              return [2\n              /*return*/\n              , this.contracts.get(accountName)];\n            }\n\n            return [4\n            /*yield*/\n            , this.getAbi(accountName, reload)];\n\n          case 1:\n            abi = _e.sent();\n            types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);\n            actions = new Map();\n\n            try {\n              for (_b = __values(abi.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n                _d = _c.value, name_1 = _d.name, type = _d.type;\n                actions.set(name_1, ser.getType(types, type));\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            result = {\n              types: types,\n              actions: actions\n            };\n            this.contracts.set(accountName, result);\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n\n\n  Api.prototype.serialize = function (buffer, type, value) {\n    this.transactionTypes.get(type).serialize(buffer, value);\n  };\n  /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n\n\n  Api.prototype.deserialize = function (buffer, type) {\n    return this.transactionTypes.get(type).deserialize(buffer);\n  };\n  /** Convert a transaction to binary */\n\n\n  Api.prototype.serializeTransaction = function (transaction) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder\n    });\n    this.serialize(buffer, 'transaction', __assign({\n      max_net_usage_words: 0,\n      max_cpu_usage_ms: 0,\n      delay_sec: 0,\n      context_free_actions: [],\n      actions: [],\n      transaction_extensions: []\n    }, transaction));\n    return buffer.asUint8Array();\n  };\n  /** Convert a transaction from binary. Leaves actions in hex. */\n\n\n  Api.prototype.deserializeTransaction = function (transaction) {\n    var buffer = new ser.SerialBuffer({\n      textEncoder: this.textEncoder,\n      textDecoder: this.textDecoder\n    });\n    buffer.pushArray(transaction);\n    return this.deserialize(buffer, 'transaction');\n  };\n  /** Convert actions to hex */\n\n\n  Api.prototype.serializeActions = function (actions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(actions.map(function (_a) {\n              var account = _a.account,\n                  name = _a.name,\n                  authorization = _a.authorization,\n                  data = _a.data;\n              return __awaiter(_this, void 0, void 0, function () {\n                var contract;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getContract(account)];\n\n                    case 1:\n                      contract = _b.sent();\n                      return [2\n                      /*return*/\n                      , ser.serializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /** Convert actions from hex */\n\n\n  Api.prototype.deserializeActions = function (actions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(actions.map(function (_a) {\n              var account = _a.account,\n                  name = _a.name,\n                  authorization = _a.authorization,\n                  data = _a.data;\n              return __awaiter(_this, void 0, void 0, function () {\n                var contract;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getContract(account)];\n\n                    case 1:\n                      contract = _b.sent();\n                      return [2\n                      /*return*/\n                      , ser.deserializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /** Convert a transaction from binary. Also deserializes actions. */\n\n\n  Api.prototype.deserializeTransactionWithActions = function (transaction) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deserializedTransaction, deserializedActions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof transaction === 'string') {\n              transaction = ser.hexToUint8Array(transaction);\n            }\n\n            deserializedTransaction = this.deserializeTransaction(transaction);\n            return [4\n            /*yield*/\n            , this.deserializeActions(deserializedTransaction.actions)];\n\n          case 1:\n            deserializedActions = _a.sent();\n            return [2\n            /*return*/\n            , __assign({}, deserializedTransaction, {\n              actions: deserializedActions\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Create and optionally broadcast a transaction.\n   *\n   * Named Parameters:\n   *    * `broadcast`: broadcast this transaction?\n   *    * `sign`: sign this transaction?\n   *    * If both `blocksBehind` and `expireSeconds` are present,\n   *      then fetch the block which is `blocksBehind` behind head block,\n   *      use it as a reference for TAPoS, and expire the transaction `expireSeconds` after that block's time.\n   * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`\n   */\n\n\n  Api.prototype.transact = function (transaction, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.broadcast,\n        broadcast = _c === void 0 ? true : _c,\n        _d = _b.sign,\n        sign = _d === void 0 ? true : _d,\n        blocksBehind = _b.blocksBehind,\n        expireSeconds = _b.expireSeconds;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var info, refBlock, abis, _e, _f, serializedTransaction, pushTransactionArgs, availableKeys, requiredKeys;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            if (!!this.chainId) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.rpc.get_info()];\n\n          case 1:\n            info = _g.sent();\n            this.chainId = info.chain_id;\n            _g.label = 2;\n\n          case 2:\n            if (!(typeof blocksBehind === 'number' && expireSeconds)) return [3\n            /*break*/\n            , 6];\n            if (!!info) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.rpc.get_info()];\n\n          case 3:\n            info = _g.sent();\n            _g.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.rpc.get_block(info.head_block_num - blocksBehind)];\n\n          case 5:\n            refBlock = _g.sent();\n            transaction = __assign({}, ser.transactionHeader(refBlock, expireSeconds), transaction);\n            _g.label = 6;\n\n          case 6:\n            if (!this.hasRequiredTaposFields(transaction)) {\n              throw new Error('Required configuration or TAPOS fields are not present');\n            }\n\n            return [4\n            /*yield*/\n            , this.getTransactionAbis(transaction)];\n\n          case 7:\n            abis = _g.sent();\n            _e = [{}, transaction];\n            _f = {};\n            return [4\n            /*yield*/\n            , this.serializeActions(transaction.actions)];\n\n          case 8:\n            transaction = __assign.apply(void 0, _e.concat([(_f.actions = _g.sent(), _f)]));\n            serializedTransaction = this.serializeTransaction(transaction);\n            pushTransactionArgs = {\n              serializedTransaction: serializedTransaction,\n              signatures: []\n            };\n            if (!sign) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , this.signatureProvider.getAvailableKeys()];\n\n          case 9:\n            availableKeys = _g.sent();\n            return [4\n            /*yield*/\n            , this.authorityProvider.getRequiredKeys({\n              transaction: transaction,\n              availableKeys: availableKeys\n            })];\n\n          case 10:\n            requiredKeys = _g.sent();\n            return [4\n            /*yield*/\n            , this.signatureProvider.sign({\n              chainId: this.chainId,\n              requiredKeys: requiredKeys,\n              serializedTransaction: serializedTransaction,\n              abis: abis\n            })];\n\n          case 11:\n            pushTransactionArgs = _g.sent();\n            _g.label = 12;\n\n          case 12:\n            if (broadcast) {\n              return [2\n              /*return*/\n              , this.pushSignedTransaction(pushTransactionArgs)];\n            }\n\n            return [2\n            /*return*/\n            , pushTransactionArgs];\n        }\n      });\n    });\n  };\n  /** Broadcast a signed transaction */\n\n\n  Api.prototype.pushSignedTransaction = function (_a) {\n    var signatures = _a.signatures,\n        serializedTransaction = _a.serializedTransaction;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        return [2\n        /*return*/\n        , this.rpc.push_transaction({\n          signatures: signatures,\n          serializedTransaction: serializedTransaction\n        })];\n      });\n    });\n  }; // eventually break out into TransactionValidator class\n\n\n  Api.prototype.hasRequiredTaposFields = function (_a) {\n    var expiration = _a.expiration,\n        ref_block_num = _a.ref_block_num,\n        ref_block_prefix = _a.ref_block_prefix,\n        transaction = __rest(_a, [\"expiration\", \"ref_block_num\", \"ref_block_prefix\"]);\n\n    return !!(expiration && ref_block_num && ref_block_prefix);\n  };\n\n  return Api;\n}(); // Api\n\n\nexports.Api = Api;","map":{"version":3,"sources":["../src/eosjs-api.ts"],"names":[],"mappings":";AAAA;;AAEG;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAA,GAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAM,MAAM,GAAG,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAM,cAAc,GAAG,OAAO,CAAC,6BAAD,CAA9B;;AAEA,IAAA,GAAA;AAAA;AAAA,YAAA;AA+BI;;;;;;;;;AASG;AACH,WAAA,GAAA,CAAY,IAAZ,EAQC;AAxBD;AACO,SAAA,SAAA,GAAY,IAAI,GAAJ,EAAZ;AAEP;;AACO,SAAA,UAAA,GAAa,IAAI,GAAJ,EAAb;AAqBH,SAAK,GAAL,GAAW,IAAI,CAAC,GAAhB;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,iBAAL,IAA0B,IAAI,CAAC,GAAxD;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,WAAL,IAAoB,IAAI,CAAC,GAA5C;AACA,SAAK,iBAAL,GAAyB,IAAI,CAAC,iBAA9B;AACA,SAAK,OAAL,GAAe,IAAI,CAAC,OAApB;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,WAAxB;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,WAAxB;AAEA,SAAK,QAAL,GAAgB,GAAG,CAAC,eAAJ,CAAoB,GAAG,CAAC,kBAAJ,EAApB,EAA8C,MAA9C,CAAhB;AACA,SAAK,gBAAL,GAAwB,GAAG,CAAC,eAAJ,CAAoB,GAAG,CAAC,kBAAJ,EAApB,EAA8C,cAA9C,CAAxB;AACH;AAED;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,MAApB,EAAsC;AAClC,QAAM,MAAM,GAAG,IAAI,GAAG,CAAC,YAAR,CAAqB;AAChC,MAAA,WAAW,EAAE,KAAK,WADc;AAEhC,MAAA,WAAW,EAAE,KAAK,WAFc;AAGhC,MAAA,KAAK,EAAE;AAHyB,KAArB,CAAf;;AAKA,QAAI,CAAC,GAAG,CAAC,mBAAJ,CAAwB,MAAM,CAAC,SAAP,EAAxB,CAAL,EAAkD;AAC9C,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,IAAA,MAAM,CAAC,WAAP;AACA,WAAO,KAAK,QAAL,CAAc,GAAd,CAAkB,SAAlB,EAA6B,WAA7B,CAAyC,MAAzC,CAAP;AACH,GAXM;AAaP;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,YAAA,GAAb,UAA0B,WAA1B,EAA+C,MAA/C,EAA6D;AAAd,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;;;;;;AACzD,gBAAI,CAAC,MAAD,IAAW,KAAK,UAAL,CAAgB,GAAhB,CAAoB,WAApB,CAAf,EAAiD;AAC7C,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,UAAL,CAAgB,GAAhB,CAAoB,WAApB,CAAP,CAAA;AACH;;;;;;;AAGmB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,SAAjB,CAA2B,WAA3B,CAAN,CAAA;;;AAAV,YAAA,MAAM,GAAI,EAAA,CAAA,IAAA,EAAD,CAAgD,GAAzD;AACA,YAAA,GAAG,GAAG,KAAK,YAAL,CAAkB,MAAlB,CAAN;AACN,YAAA,SAAS,GAAG;AAAE,cAAA,MAAM,EAAA,MAAR;AAAU,cAAA,GAAG,EAAA;AAAb,aAAZ;;;;;;;AAEA,YAAA,GAAC,CAAC,OAAF,GAAY,sBAAoB,WAApB,GAA+B,IAA/B,GAAoC,GAAC,CAAC,OAAlD;AACA,kBAAM,GAAN;;;AAEJ,gBAAI,CAAC,SAAL,EAAgB;AACZ,oBAAM,IAAI,KAAJ,CAAU,qBAAmB,WAA7B,CAAN;AACH;;AACD,iBAAK,UAAL,CAAgB,GAAhB,CAAoB,WAApB,EAAiC,SAAjC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,SAAP,CAAA;;;;AACH,GAlBY;AAoBb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,MAAA,GAAb,UAAoB,WAApB,EAAyC,MAAzC,EAAuD;AAAd,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;;;;;AAC3C,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAL,CAAkB,WAAlB,EAA+B,MAA/B,CAAN,CAAA;;;AAAR,mBAAA,CAAA;AAAA;AAAA,cAAQ,EAAA,CAAA,IAAA,EAAD,CAA+C,GAAtD,CAAA;;;;AACH,GAFY;AAIb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,kBAAA,GAAb,UAAgC,WAAhC,EAAkD,MAAlD,EAAgE;AAAd,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;;;;;;;AACtD,QAAA,QAAQ,GAAa,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,UAAC,MAAD,EAAmB;AAAa,iBAAA,MAAM,CAAN,OAAA;AAAc,SAAtE,CAArB;AACA,QAAA,cAAc,GAAgB,IAAI,GAAJ,CAAQ,QAAR,CAA9B;AACA,QAAA,cAAc,GAA8B,QAAA,CAAI,cAAJ,CAAA,CAAoB,GAApB,CAC9C,UAAO,OAAP,EAAsB;AAAA,iBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;AAClB,oBAAA,WAAW,EAAE;;AAAe,yBAAA,CAAA;AAAA;AAAA,oBAAM,KAAK,YAAL,CAAkB,OAAlB,EAA2B,MAA3B,CAAN,CAAA;;;AADe,yBAAA,CAAA;AAAA;AAAA,qBACrB,EAAA,CAAA,GAAA,GAAM,EAAA,CAAA,IAAA,EAAD,CAA2C,MAAhD,EACxB,EAF6C,EAAA;;;WAAzB,CAAA;AAEpB,SAH4C,CAA5C;AAIN,eAAA,CAAA;AAAA;AAAA,UAAO,OAAO,CAAC,GAAR,CAAY,cAAZ,CAAP,CAAA;;;AACH,GARY;AAUb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,WAAA,GAAb,UAAyB,WAAzB,EAA8C,MAA9C,EAA4D;AAAd,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;;;;;;;AACxD,gBAAI,CAAC,MAAD,IAAW,KAAK,SAAL,CAAe,GAAf,CAAmB,WAAnB,CAAf,EAAgD;AAC5C,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,SAAL,CAAe,GAAf,CAAmB,WAAnB,CAAP,CAAA;AACH;;AACW,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,MAAL,CAAY,WAAZ,EAAyB,MAAzB,CAAN,CAAA;;;AAAN,YAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN;AACA,YAAA,KAAK,GAAG,GAAG,CAAC,eAAJ,CAAoB,GAAG,CAAC,kBAAJ,EAApB,EAA8C,GAA9C,CAAR;AACA,YAAA,OAAO,GAAG,IAAI,GAAJ,EAAV;;;AACN,mBAA6B,EAAA,GAAA,QAAA,CAAA,GAAG,CAAC,OAAJ,CAAA,EAAW,EAAA,GAAA,EAAA,CAAA,IAAA,EAAxC,EAAwC,CAAA,EAAA,CAAA,IAAxC,EAAwC,EAAA,GAAA,EAAA,CAAA,IAAA,EAAxC,EAA0C;AAA/B,gBAAA,EAAA,GAAA,EAAA,CAAA,KAAA,EAAE,MAAA,GAAA,EAAA,CAAA,IAAF,EAAQ,IAAI,GAAA,EAAA,CAAA,IAAZ;AACP,gBAAA,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAkB,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAAlB;AACH;;;;;;;;;;;;;AACK,YAAA,MAAM,GAAG;AAAE,cAAA,KAAK,EAAA,KAAP;AAAS,cAAA,OAAO,EAAA;AAAhB,aAAT;AACN,iBAAK,SAAL,CAAe,GAAf,CAAmB,WAAnB,EAAgC,MAAhC;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,MAAP,CAAA;;;;AACH,GAbY;AAeb;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAA2C,IAA3C,EAAyD,KAAzD,EAAmE;AAC/D,SAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA1B,EAAgC,SAAhC,CAA0C,MAA1C,EAAkD,KAAlD;AACH,GAFM;AAIP;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,WAAA,GAAP,UAAmB,MAAnB,EAA6C,IAA7C,EAAyD;AACrD,WAAO,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,IAA1B,EAAgC,WAAhC,CAA4C,MAA5C,CAAP;AACH,GAFM;AAIP;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,UAA4B,WAA5B,EAA4C;AACxC,QAAM,MAAM,GAAG,IAAI,GAAG,CAAC,YAAR,CAAqB;AAAE,MAAA,WAAW,EAAE,KAAK,WAApB;AAAiC,MAAA,WAAW,EAAE,KAAK;AAAnD,KAArB,CAAf;AACA,SAAK,SAAL,CAAe,MAAf,EAAuB,aAAvB,EAAoC,QAAA,CAAA;AAChC,MAAA,mBAAmB,EAAE,CADW;AAEhC,MAAA,gBAAgB,EAAE,CAFc;AAGhC,MAAA,SAAS,EAAE,CAHqB;AAIhC,MAAA,oBAAoB,EAAE,EAJU;AAKhC,MAAA,OAAO,EAAE,EALuB;AAMhC,MAAA,sBAAsB,EAAE;AANQ,KAAA,EAO7B,WAP6B,CAApC;AASA,WAAO,MAAM,CAAC,YAAP,EAAP;AACH,GAZM;AAcP;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,UAA8B,WAA9B,EAAqD;AACjD,QAAM,MAAM,GAAG,IAAI,GAAG,CAAC,YAAR,CAAqB;AAAE,MAAA,WAAW,EAAE,KAAK,WAApB;AAAiC,MAAA,WAAW,EAAE,KAAK;AAAnD,KAArB,CAAf;AACA,IAAA,MAAM,CAAC,SAAP,CAAiB,WAAjB;AACA,WAAO,KAAK,WAAL,CAAiB,MAAjB,EAAyB,aAAzB,CAAP;AACH,GAJM;AAMP;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAb,UAA8B,OAA9B,EAAmD;;;;;;;AACxC,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,GAAR,CAAY,UAAO,EAAP,EAA6C;kBAApC,OAAA,GAAA,EAAA,CAAA,O;kBAAS,IAAA,GAAA,EAAA,CAAA,I;kBAAM,aAAA,GAAA,EAAA,CAAA,a;kBAAe,IAAA,GAAA,EAAA,CAAA,I;;;;;;AACvD,6BAAA,CAAA;AAAA;AAAA,wBAAM,KAAK,WAAL,CAAiB,OAAjB,CAAN,CAAA;;;AAAX,sBAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,6BAAA,CAAA;AAAA;AAAA,wBAAO,GAAG,CAAC,eAAJ,CACH,QADG,EACO,OADP,EACgB,IADhB,EACsB,aADtB,EACqC,IADrC,EAC2C,KAAK,WADhD,EAC6D,KAAK,WADlE,CAAP,CAAA;;;;AAEH,aAJwB,CAAZ,CAAN,CAAA;;;AAAP,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AAKH,GANY;AAQb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,kBAAA,GAAb,UAAgC,OAAhC,EAAqD;;;;;;;AAC1C,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAO,CAAC,GAAR,CAAY,OAAO,CAAC,GAAR,CAAY,UAAO,EAAP,EAA6C;kBAApC,OAAA,GAAA,EAAA,CAAA,O;kBAAS,IAAA,GAAA,EAAA,CAAA,I;kBAAM,aAAA,GAAA,EAAA,CAAA,a;kBAAe,IAAA,GAAA,EAAA,CAAA,I;;;;;;AACvD,6BAAA,CAAA;AAAA;AAAA,wBAAM,KAAK,WAAL,CAAiB,OAAjB,CAAN,CAAA;;;AAAX,sBAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,6BAAA,CAAA;AAAA;AAAA,wBAAO,GAAG,CAAC,iBAAJ,CACH,QADG,EACO,OADP,EACgB,IADhB,EACsB,aADtB,EACqC,IADrC,EAC2C,KAAK,WADhD,EAC6D,KAAK,WADlE,CAAP,CAAA;;;;AAEH,aAJwB,CAAZ,CAAN,CAAA;;;AAAP,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AAKH,GANY;AAQb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,iCAAA,GAAb,UAA+C,WAA/C,EAA+E;;;;;;AAC3E,gBAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;AACjC,cAAA,WAAW,GAAG,GAAG,CAAC,eAAJ,CAAoB,WAApB,CAAd;AACH;;AACK,YAAA,uBAAuB,GAAG,KAAK,sBAAL,CAA4B,WAA5B,CAA1B;AACsB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,CAAwB,uBAAuB,CAAC,OAAhD,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;AACN,mBAAA,CAAA;AAAA;AAAA,cAAA,QAAA,CAAA,EAAA,EAAY,uBAAZ,EAAmC;AAAE,cAAA,OAAO,EAAE;AAAX,aAAnC,CAAA,CAAA;;;;AACH,GAPY;AASb;;;;;;;;;;AAUG;;;AACU,EAAA,GAAA,CAAA,SAAA,CAAA,QAAA,GAAb,UAAsB,WAAtB,EAAwC,EAAxC,EACgG;QADxD,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;QAAE,EAAA,GAAA,EAAA,CAAA,S;QAAA,SAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E;QAAkB,EAAA,GAAA,EAAA,CAAA,I;QAAA,IAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,IAAA,GAAA,E;QAAa,YAAA,GAAA,EAAA,CAAA,Y;QAAc,aAAA,GAAA,EAAA,CAAA,a;;;;;;;;iBAI/E,CAAC,KAAK,O,EAAN,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACO,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,GAAL,CAAS,QAAT,EAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;AACA,iBAAK,OAAL,GAAe,IAAI,CAAC,QAApB;;;;gBAGA,EAAA,OAAO,YAAP,KAAwB,QAAxB,IAAoC,aAApC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;iBACI,CAAC,I,EAAD,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACO,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,GAAL,CAAS,QAAT,EAAN,CAAA;;;AAAP,YAAA,IAAI,GAAG,EAAA,CAAA,IAAA,EAAP;;;;AAEa,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,GAAL,CAAS,SAAT,CAAmB,IAAI,CAAC,cAAL,GAAsB,YAAzC,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AACN,YAAA,WAAW,GAAA,QAAA,CAAA,EAAA,EAAQ,GAAG,CAAC,iBAAJ,CAAsB,QAAtB,EAAgC,aAAhC,CAAR,EAA2D,WAA3D,CAAX;;;;AAGJ,gBAAI,CAAC,KAAK,sBAAL,CAA4B,WAA5B,CAAL,EAA+C;AAC3C,oBAAM,IAAI,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAEyB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,CAAwB,WAAxB,CAAN,CAAA;;;AAApB,YAAA,IAAI,GAAgB,EAAA,CAAA,IAAA,EAApB;sBACa,W;;AAAsB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,CAAsB,WAAW,CAAC,OAAlC,CAAN,CAAA;;;AAAzC,YAAA,WAAW,GAAA,QAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,EAAqB,EAAA,CAAA,OAAA,GAAS,EAAA,CAAA,IAAA,EAAT,EAAyD,EAA9E,EAAA,CAAA,CAAX;AACM,YAAA,qBAAqB,GAAG,KAAK,oBAAL,CAA0B,WAA1B,CAAxB;AACF,YAAA,mBAAmB,GAAyB;AAAE,cAAA,qBAAqB,EAAA,qBAAvB;AAAyB,cAAA,UAAU,EAAE;AAArC,aAA5C;iBAEA,I,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;AACsB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,gBAAvB,EAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;AACe,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,eAAvB,CAAuC;AAAE,cAAA,WAAW,EAAA,WAAb;AAAe,cAAA,aAAa,EAAA;AAA5B,aAAvC,CAAN,CAAA;;;AAAf,YAAA,YAAY,GAAG,EAAA,CAAA,IAAA,EAAf;AACgB,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,CAAuB,IAAvB,CAA4B;AACpD,cAAA,OAAO,EAAE,KAAK,OADsC;AAEpD,cAAA,YAAY,EAAA,YAFwC;AAGpD,cAAA,qBAAqB,EAAA,qBAH+B;AAIpD,cAAA,IAAI,EAAA;AAJgD,aAA5B,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;;;;AAOJ,gBAAI,SAAJ,EAAe;AACX,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,qBAAL,CAA2B,mBAA3B,CAAP,CAAA;AACH;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,mBAAP,CAAA;;;;AACH,GAxCY;AA0Cb;;;AACa,EAAA,GAAA,CAAA,SAAA,CAAA,qBAAA,GAAb,UAAmC,EAAnC,EAA6F;QAAxD,UAAA,GAAA,EAAA,CAAA,U;QAAY,qBAAA,GAAA,EAAA,CAAA,qB;;;AAC7C,eAAA,CAAA;AAAA;AAAA,UAAO,KAAK,GAAL,CAAS,gBAAT,CAA0B;AAC7B,UAAA,UAAU,EAAA,UADmB;AAE7B,UAAA,qBAAqB,EAAA;AAFQ,SAA1B,CAAP,CAAA;;;AAIH,GALY,CAnPjB,CA0PI;;;AACQ,EAAA,GAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,UAA+B,EAA/B,EAAmG;AAAlE,QAAA,UAAA,GAAA,EAAA,CAAA,UAAA;AAAA,QAAY,aAAA,GAAA,EAAA,CAAA,aAAZ;AAAA,QAA2B,gBAAA,GAAA,EAAA,CAAA,gBAA3B;AAAA,QAA6C,WAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,YAAA,EAAA,eAAA,EAAA,kBAAA,CAAA,CAA7C;;AAC7B,WAAO,CAAC,EAAE,UAAU,IAAI,aAAd,IAA+B,gBAAjC,CAAR;AACH,GAFO;;AAIZ,SAAA,GAAA;AAAC,CA/PD,EAAA,C,CA+PE;;;AA/PW,OAAA,CAAA,GAAA,GAAA,GAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @module API\n */\n// copyright defined in eosjs/LICENSE.txt\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m) return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ser = require(\"./eosjs-serialize\");\nvar abiAbi = require('../src/abi.abi.json');\nvar transactionAbi = require('../src/transaction.abi.json');\nvar Api = /** @class */ (function () {\n    /**\n     * @param args\n     *    * `rpc`: Issues RPC calls\n     *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction\n     *    * `abiProvider`: Supplies ABIs in raw form (binary)\n     *    * `signatureProvider`: Signs transactions\n     *    * `chainId`: Identifies chain\n     *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser\n     *    * `textDecoder`: `TextDecoder` instance to use. Pass in `null` if running in a browser\n     */\n    function Api(args) {\n        /** Holds information needed to serialize contract actions */\n        this.contracts = new Map();\n        /** Fetched abis */\n        this.cachedAbis = new Map();\n        this.rpc = args.rpc;\n        this.authorityProvider = args.authorityProvider || args.rpc;\n        this.abiProvider = args.abiProvider || args.rpc;\n        this.signatureProvider = args.signatureProvider;\n        this.chainId = args.chainId;\n        this.textEncoder = args.textEncoder;\n        this.textDecoder = args.textDecoder;\n        this.abiTypes = ser.getTypesFromAbi(ser.createInitialTypes(), abiAbi);\n        this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);\n    }\n    /** Decodes an abi as Uint8Array into json. */\n    Api.prototype.rawAbiToJson = function (rawAbi) {\n        var buffer = new ser.SerialBuffer({\n            textEncoder: this.textEncoder,\n            textDecoder: this.textDecoder,\n            array: rawAbi,\n        });\n        if (!ser.supportedAbiVersion(buffer.getString())) {\n            throw new Error('Unsupported abi version');\n        }\n        buffer.restartRead();\n        return this.abiTypes.get('abi_def').deserialize(buffer);\n    };\n    /** Get abi in both binary and structured forms. Fetch when needed. */\n    Api.prototype.getCachedAbi = function (accountName, reload) {\n        if (reload === void 0) { reload = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var cachedAbi, rawAbi, abi, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!reload && this.cachedAbis.get(accountName)) {\n                            return [2 /*return*/, this.cachedAbis.get(accountName)];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.abiProvider.getRawAbi(accountName)];\n                    case 2:\n                        rawAbi = (_a.sent()).abi;\n                        abi = this.rawAbiToJson(rawAbi);\n                        cachedAbi = { rawAbi: rawAbi, abi: abi };\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        e_1.message = \"fetching abi for \" + accountName + \": \" + e_1.message;\n                        throw e_1;\n                    case 4:\n                        if (!cachedAbi) {\n                            throw new Error(\"Missing abi for \" + accountName);\n                        }\n                        this.cachedAbis.set(accountName, cachedAbi);\n                        return [2 /*return*/, cachedAbi];\n                }\n            });\n        });\n    };\n    /** Get abi in structured form. Fetch when needed. */\n    Api.prototype.getAbi = function (accountName, reload) {\n        if (reload === void 0) { reload = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getCachedAbi(accountName, reload)];\n                    case 1: return [2 /*return*/, (_a.sent()).abi];\n                }\n            });\n        });\n    };\n    /** Get abis needed by a transaction */\n    Api.prototype.getTransactionAbis = function (transaction, reload) {\n        if (reload === void 0) { reload = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts, uniqueAccounts, actionPromises;\n            var _this = this;\n            return __generator(this, function (_a) {\n                accounts = transaction.actions.map(function (action) { return action.account; });\n                uniqueAccounts = new Set(accounts);\n                actionPromises = __spread(uniqueAccounts).map(function (account) { return __awaiter(_this, void 0, void 0, function () {\n                    var _a;\n                    return __generator(this, function (_b) {\n                        switch (_b.label) {\n                            case 0:\n                                _a = {\n                                    accountName: account\n                                };\n                                return [4 /*yield*/, this.getCachedAbi(account, reload)];\n                            case 1: return [2 /*return*/, (_a.abi = (_b.sent()).rawAbi,\n                                    _a)];\n                        }\n                    });\n                }); });\n                return [2 /*return*/, Promise.all(actionPromises)];\n            });\n        });\n    };\n    /** Get data needed to serialize actions in a contract */\n    Api.prototype.getContract = function (accountName, reload) {\n        if (reload === void 0) { reload = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var e_2, _a, abi, types, actions, _b, _c, _d, name_1, type, result;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!reload && this.contracts.get(accountName)) {\n                            return [2 /*return*/, this.contracts.get(accountName)];\n                        }\n                        return [4 /*yield*/, this.getAbi(accountName, reload)];\n                    case 1:\n                        abi = _e.sent();\n                        types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);\n                        actions = new Map();\n                        try {\n                            for (_b = __values(abi.actions), _c = _b.next(); !_c.done; _c = _b.next()) {\n                                _d = _c.value, name_1 = _d.name, type = _d.type;\n                                actions.set(name_1, ser.getType(types, type));\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        result = { types: types, actions: actions };\n                        this.contracts.set(accountName, result);\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    Api.prototype.serialize = function (buffer, type, value) {\n        this.transactionTypes.get(type).serialize(buffer, value);\n    };\n    /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */\n    Api.prototype.deserialize = function (buffer, type) {\n        return this.transactionTypes.get(type).deserialize(buffer);\n    };\n    /** Convert a transaction to binary */\n    Api.prototype.serializeTransaction = function (transaction) {\n        var buffer = new ser.SerialBuffer({ textEncoder: this.textEncoder, textDecoder: this.textDecoder });\n        this.serialize(buffer, 'transaction', __assign({ max_net_usage_words: 0, max_cpu_usage_ms: 0, delay_sec: 0, context_free_actions: [], actions: [], transaction_extensions: [] }, transaction));\n        return buffer.asUint8Array();\n    };\n    /** Convert a transaction from binary. Leaves actions in hex. */\n    Api.prototype.deserializeTransaction = function (transaction) {\n        var buffer = new ser.SerialBuffer({ textEncoder: this.textEncoder, textDecoder: this.textDecoder });\n        buffer.pushArray(transaction);\n        return this.deserialize(buffer, 'transaction');\n    };\n    /** Convert actions to hex */\n    Api.prototype.serializeActions = function (actions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(actions.map(function (_a) {\n                            var account = _a.account, name = _a.name, authorization = _a.authorization, data = _a.data;\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var contract;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, this.getContract(account)];\n                                        case 1:\n                                            contract = _b.sent();\n                                            return [2 /*return*/, ser.serializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                                    }\n                                });\n                            });\n                        }))];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /** Convert actions from hex */\n    Api.prototype.deserializeActions = function (actions) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(actions.map(function (_a) {\n                            var account = _a.account, name = _a.name, authorization = _a.authorization, data = _a.data;\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var contract;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, this.getContract(account)];\n                                        case 1:\n                                            contract = _b.sent();\n                                            return [2 /*return*/, ser.deserializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];\n                                    }\n                                });\n                            });\n                        }))];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /** Convert a transaction from binary. Also deserializes actions. */\n    Api.prototype.deserializeTransactionWithActions = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deserializedTransaction, deserializedActions;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (typeof transaction === 'string') {\n                            transaction = ser.hexToUint8Array(transaction);\n                        }\n                        deserializedTransaction = this.deserializeTransaction(transaction);\n                        return [4 /*yield*/, this.deserializeActions(deserializedTransaction.actions)];\n                    case 1:\n                        deserializedActions = _a.sent();\n                        return [2 /*return*/, __assign({}, deserializedTransaction, { actions: deserializedActions })];\n                }\n            });\n        });\n    };\n    /**\n     * Create and optionally broadcast a transaction.\n     *\n     * Named Parameters:\n     *    * `broadcast`: broadcast this transaction?\n     *    * `sign`: sign this transaction?\n     *    * If both `blocksBehind` and `expireSeconds` are present,\n     *      then fetch the block which is `blocksBehind` behind head block,\n     *      use it as a reference for TAPoS, and expire the transaction `expireSeconds` after that block's time.\n     * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`\n     */\n    Api.prototype.transact = function (transaction, _a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.broadcast, broadcast = _c === void 0 ? true : _c, _d = _b.sign, sign = _d === void 0 ? true : _d, blocksBehind = _b.blocksBehind, expireSeconds = _b.expireSeconds;\n        return __awaiter(this, void 0, void 0, function () {\n            var info, refBlock, abis, _e, _f, serializedTransaction, pushTransactionArgs, availableKeys, requiredKeys;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        if (!!this.chainId) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.rpc.get_info()];\n                    case 1:\n                        info = _g.sent();\n                        this.chainId = info.chain_id;\n                        _g.label = 2;\n                    case 2:\n                        if (!(typeof blocksBehind === 'number' && expireSeconds)) return [3 /*break*/, 6];\n                        if (!!info) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.rpc.get_info()];\n                    case 3:\n                        info = _g.sent();\n                        _g.label = 4;\n                    case 4: return [4 /*yield*/, this.rpc.get_block(info.head_block_num - blocksBehind)];\n                    case 5:\n                        refBlock = _g.sent();\n                        transaction = __assign({}, ser.transactionHeader(refBlock, expireSeconds), transaction);\n                        _g.label = 6;\n                    case 6:\n                        if (!this.hasRequiredTaposFields(transaction)) {\n                            throw new Error('Required configuration or TAPOS fields are not present');\n                        }\n                        return [4 /*yield*/, this.getTransactionAbis(transaction)];\n                    case 7:\n                        abis = _g.sent();\n                        _e = [{}, transaction];\n                        _f = {};\n                        return [4 /*yield*/, this.serializeActions(transaction.actions)];\n                    case 8:\n                        transaction = __assign.apply(void 0, _e.concat([(_f.actions = _g.sent(), _f)]));\n                        serializedTransaction = this.serializeTransaction(transaction);\n                        pushTransactionArgs = { serializedTransaction: serializedTransaction, signatures: [] };\n                        if (!sign) return [3 /*break*/, 12];\n                        return [4 /*yield*/, this.signatureProvider.getAvailableKeys()];\n                    case 9:\n                        availableKeys = _g.sent();\n                        return [4 /*yield*/, this.authorityProvider.getRequiredKeys({ transaction: transaction, availableKeys: availableKeys })];\n                    case 10:\n                        requiredKeys = _g.sent();\n                        return [4 /*yield*/, this.signatureProvider.sign({\n                                chainId: this.chainId,\n                                requiredKeys: requiredKeys,\n                                serializedTransaction: serializedTransaction,\n                                abis: abis,\n                            })];\n                    case 11:\n                        pushTransactionArgs = _g.sent();\n                        _g.label = 12;\n                    case 12:\n                        if (broadcast) {\n                            return [2 /*return*/, this.pushSignedTransaction(pushTransactionArgs)];\n                        }\n                        return [2 /*return*/, pushTransactionArgs];\n                }\n            });\n        });\n    };\n    /** Broadcast a signed transaction */\n    Api.prototype.pushSignedTransaction = function (_a) {\n        var signatures = _a.signatures, serializedTransaction = _a.serializedTransaction;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                return [2 /*return*/, this.rpc.push_transaction({\n                        signatures: signatures,\n                        serializedTransaction: serializedTransaction,\n                    })];\n            });\n        });\n    };\n    // eventually break out into TransactionValidator class\n    Api.prototype.hasRequiredTaposFields = function (_a) {\n        var expiration = _a.expiration, ref_block_num = _a.ref_block_num, ref_block_prefix = _a.ref_block_prefix, transaction = __rest(_a, [\"expiration\", \"ref_block_num\", \"ref_block_prefix\"]);\n        return !!(expiration && ref_block_num && ref_block_prefix);\n    };\n    return Api;\n}()); // Api\nexports.Api = Api;\n//# sourceMappingURL=eosjs-api.js.map"]},"metadata":{},"sourceType":"script"}