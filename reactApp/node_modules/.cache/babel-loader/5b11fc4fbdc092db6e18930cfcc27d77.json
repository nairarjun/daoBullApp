{"ast":null,"code":"import { Api, JsonRpc } from 'eosjs'; // https://github.com/EOSIO/eosjs\n\nimport { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig';\nimport config from '../common/config';\nexport default class EOSIOClient {\n  constructor(contractAccount, activeUser) {\n    this.transaction = async (actor, action, data) => {\n      console.log(\"transaction.....!!!!!!\", \"actor:\", actor, \"action:\", action, \"data:\", data);\n\n      try {\n        let tansact = await this.eos.signTransaction({\n          actions: [{\n            account: this.contractAccount,\n            name: action,\n            authorization: [{\n              actor,\n              permission: 'active'\n            }],\n            data: { ...data\n            }\n          }]\n        }, {\n          broadcast: true\n        });\n        return tansact;\n      } catch (error) {\n        alert(error);\n        return {\n          isError: true\n        };\n      }\n    };\n\n    this.getTableScope = async (contract, table, scope) => {\n      console.log(\"getTableScope.....marcotesthac\", contract, table, scope);\n      return await this.rpc.get_table_by_scope({\n        json: true,\n        \"code\": contract,\n        \"table\": table,\n        \"scope\": scope,\n        // \"lower_bound\": \"string\",\n        // \"upper_bound\": \"string\",\n        // \"limit\": 10,\n        \"reverse\": true,\n        \"show_payer\": true\n      });\n    };\n\n    this.getTableRows = async (contract, scope, table, lower = null, upper = null, pageSize = null) => {\n      console.log(\"scope....getTableRowsCALLER\", contract, scope, table, lower, upper, pageSize);\n      let req = {\n        json: true,\n        code: contract,\n        //contract that we target\n        scope: scope,\n        //account that owns data  \n        table: table,\n        //table name\n        // limit: pageSize,\n        // lower_bound: 0,\n        // upper_bound: 30,\n        // lower_bound:'id',//table primary key\n        // limit:20,//here we limit to 1 get only the single row with primary key eqaul to testacc\n        reverse: false,\n        show_payer: true\n      };\n      if (pageSize != null) req.limit = pageSize;\n      let data = await this.rpc.get_table_rows(req);\n      console.log();\n      console.log({\n        scope,\n        data\n      });\n      return {\n        scope,\n        data\n      };\n    };\n\n    console.log(\"contractAccount....!!!!\", contractAccount, activeUser, config.REACT_APP_EOSIO_HTTP_URL);\n    const rpc = new JsonRpc(config.REACT_APP_EOSIO_HTTP_URL); // const signatureProvider = new JsSignatureProvider([config.REACT_APP_EOSIO_PRIVATE_KEY])\n\n    this.contractAccount = contractAccount; // this.eos = new Api({ rpc, signatureProvider })\n\n    this.eos = activeUser;\n    this.rpc = new JsonRpc(config.REACT_APP_EOSIO_HTTP_URL);\n  }\n\n}","map":{"version":3,"sources":["/home/turbo/devel/MyGame/contracts/eos-hackathon/decentralize-io-ui/src/common/eosio-apiService.js"],"names":["Api","JsonRpc","JsSignatureProvider","config","EOSIOClient","constructor","contractAccount","activeUser","transaction","actor","action","data","console","log","tansact","eos","signTransaction","actions","account","name","authorization","permission","broadcast","error","alert","isError","getTableScope","contract","table","scope","rpc","get_table_by_scope","json","getTableRows","lower","upper","pageSize","req","code","reverse","show_payer","limit","get_table_rows","REACT_APP_EOSIO_HTTP_URL"],"mappings":"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","sourcesContent":["import { Api, JsonRpc } from 'eosjs' // https://github.com/EOSIO/eosjs\nimport { JsSignatureProvider } from 'eosjs/dist/eosjs-jssig'\nimport config from '../common/config'\n\nexport default class EOSIOClient {\n  constructor(contractAccount, activeUser) {\n    console.log(\"contractAccount....!!!!\", contractAccount, activeUser, config.REACT_APP_EOSIO_HTTP_URL)\n    const rpc = new JsonRpc(config.REACT_APP_EOSIO_HTTP_URL)\n    // const signatureProvider = new JsSignatureProvider([config.REACT_APP_EOSIO_PRIVATE_KEY])\n    this.contractAccount = contractAccount\n    // this.eos = new Api({ rpc, signatureProvider })\n    this.eos = activeUser\n    this.rpc = new JsonRpc(config.REACT_APP_EOSIO_HTTP_URL)\n  }\n\n\n  transaction = async (actor, action, data) => {\n    console.log(\"transaction.....!!!!!!\", \"actor:\", actor, \"action:\", action, \"data:\", data)\n\n    try {\n      let tansact = await this.eos.signTransaction({\n        actions: [\n          {\n            account: this.contractAccount,\n            name: action,\n            authorization: [\n              {\n                actor,\n                permission: 'active'\n              }\n            ],\n            data: {\n              ...data\n            }\n          }\n        ]\n      }, { broadcast: true })\n      return tansact\n\n    } catch (error) {\n      alert(error)\n      return { isError: true }\n\n    }\n\n  }\n\n  getTableScope = async (contract, table, scope) => {\n    console.log(\"getTableScope.....marcotesthac\", contract, table, scope)\n    return await this.rpc.get_table_by_scope({\n      json: true,\n      \"code\": contract,\n      \"table\": table,\n      \"scope\": scope,\n      // \"lower_bound\": \"string\",\n      // \"upper_bound\": \"string\",\n      // \"limit\": 10,\n      \"reverse\": true,\n      \"show_payer\": true\n    })\n  }\n\n  getTableRows = async (contract, scope, table, lower = null, upper = null, pageSize = null) => {\n    console.log(\"scope....getTableRowsCALLER\", contract, scope, table, lower, upper, pageSize)\n    let req = {\n      json: true,\n      code: contract, //contract that we target\n      scope: scope, //account that owns data  \n      table: table,//table name\n      // limit: pageSize,\n      // lower_bound: 0,\n      // upper_bound: 30,\n      // lower_bound:'id',//table primary key\n      // limit:20,//here we limit to 1 get only the single row with primary key eqaul to testacc\n      reverse: false,\n      show_payer: true\n    }\n    if (pageSize != null)\n    req.limit = pageSize\n    let data = await this.rpc.get_table_rows(req)\n    console.log()\n    console.log({ scope, data })\n    return { scope, data }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}