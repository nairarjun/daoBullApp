{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/turbo/devel/MyGame/contracts/decentralize-io-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/turbo/devel/MyGame/contracts/decentralize-io-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * This class provides the business logic layer for the UAL.\n */\n\nvar UAL = /*#__PURE__*/function () {\n  /**\n   * @param chains          A list of chains the dapp supports.\n   *\n   * @param appName         The name of the app using the authenticators\n   *\n   * @param authenticators  A list of authenticator apps that the dapp supports.\n   */\n  function UAL(chains, appName, authenticators) {\n    _classCallCheck(this, UAL);\n\n    this.chains = chains;\n    this.appName = appName;\n    this.authenticators = authenticators;\n  }\n  /**\n   * Returns an object with a list of initialized Authenticators that returned true for shouldRender()\n   * as well as an authenticator that supports autoLogin\n   */\n\n\n  _createClass(UAL, [{\n    key: \"getAuthenticators\",\n    value: function getAuthenticators() {\n      var availableAuthenticators = this.authenticators.filter(function (authenticator) {\n        return authenticator.shouldRender();\n      });\n      availableAuthenticators.forEach(function (authenticator) {\n        return authenticator.init();\n      });\n      var autoLoginAuthenticator = null;\n\n      if (availableAuthenticators.length === 1) {\n        if (availableAuthenticators[0].shouldAutoLogin()) {\n          autoLoginAuthenticator = availableAuthenticators[0];\n        }\n      }\n\n      return {\n        availableAuthenticators: availableAuthenticators,\n        autoLoginAuthenticator: autoLoginAuthenticator\n      };\n    }\n  }]);\n\n  return UAL;\n}();\n\nexports.UAL = UAL;","map":{"version":3,"sources":["/home/turbo/devel/MyGame/contracts/decentralize-io-ui/node_modules/universal-authenticator-library/dist/UAL.js"],"names":["Object","defineProperty","exports","value","UAL","chains","appName","authenticators","availableAuthenticators","filter","authenticator","shouldRender","forEach","init","autoLoginAuthenticator","length","shouldAutoLogin"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;;IACMC,G;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,eAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,cAA7B,EAA6C;AAAA;;AACzC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;AACD;AACJ;AACA;AACA;;;;;WACI,6BAAoB;AAChB,UAAMC,uBAAuB,GAAG,KAAKD,cAAL,CAAoBE,MAApB,CAA2B,UAACC,aAAD,EAAmB;AAC1E,eAAOA,aAAa,CAACC,YAAd,EAAP;AACH,OAF+B,CAAhC;AAGAH,MAAAA,uBAAuB,CAACI,OAAxB,CAAgC,UAACF,aAAD;AAAA,eAAmBA,aAAa,CAACG,IAAd,EAAnB;AAAA,OAAhC;AACA,UAAIC,sBAAsB,GAAG,IAA7B;;AACA,UAAIN,uBAAuB,CAACO,MAAxB,KAAmC,CAAvC,EAA0C;AACtC,YAAIP,uBAAuB,CAAC,CAAD,CAAvB,CAA2BQ,eAA3B,EAAJ,EAAkD;AAC9CF,UAAAA,sBAAsB,GAAGN,uBAAuB,CAAC,CAAD,CAAhD;AACH;AACJ;;AACD,aAAO;AACHA,QAAAA,uBAAuB,EAAvBA,uBADG;AAEHM,QAAAA,sBAAsB,EAAtBA;AAFG,OAAP;AAIH;;;;;;AAELZ,OAAO,CAACE,GAAR,GAAcA,GAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * This class provides the business logic layer for the UAL.\n */\nclass UAL {\n    /**\n     * @param chains          A list of chains the dapp supports.\n     *\n     * @param appName         The name of the app using the authenticators\n     *\n     * @param authenticators  A list of authenticator apps that the dapp supports.\n     */\n    constructor(chains, appName, authenticators) {\n        this.chains = chains;\n        this.appName = appName;\n        this.authenticators = authenticators;\n    }\n    /**\n     * Returns an object with a list of initialized Authenticators that returned true for shouldRender()\n     * as well as an authenticator that supports autoLogin\n     */\n    getAuthenticators() {\n        const availableAuthenticators = this.authenticators.filter((authenticator) => {\n            return authenticator.shouldRender();\n        });\n        availableAuthenticators.forEach((authenticator) => authenticator.init());\n        let autoLoginAuthenticator = null;\n        if (availableAuthenticators.length === 1) {\n            if (availableAuthenticators[0].shouldAutoLogin()) {\n                autoLoginAuthenticator = availableAuthenticators[0];\n            }\n        }\n        return {\n            availableAuthenticators,\n            autoLoginAuthenticator\n        };\n    }\n}\nexports.UAL = UAL;\n"]},"metadata":{},"sourceType":"script"}