{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.darkenColor = void 0;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/*\n * Code inspired by Chris Coyier's vanilla css lighten/darken color solution\n * https://css-tricks.com/snippets/javascript/lighten-darken-color/\n */\n\n\nvar hexToRGB = function hexToRGB(color) {\n  var num = parseInt(color.replace('#', ''), 16);\n  var r = (num >> 16) - 30; // eslint-disable-line\n\n  var b = (num >> 8 & 0x00FF) - 30; // eslint-disable-line\n\n  var g = (num & 0x0000FF) - 30; // eslint-disable-line\n\n  return [r, b, g];\n};\n\nvar limitValues = function limitValues(value) {\n  if (value > 255) return 255;\n  if (value < 0) return 0;\n  return value;\n};\n\nvar darkenColor = function darkenColor(color) {\n  var colors;\n\n  if (!color) {\n    return '#1A3270';\n  }\n\n  if (color.indexOf('rgb') !== -1) {\n    colors = color.replace('rgb(', '').replace(')', '').split(',').map(function (num) {\n      return parseInt(num, 10) - 30;\n    }).map(limitValues);\n  } else {\n    colors = hexToRGB(color).map(limitValues);\n  }\n\n  var _colors = colors,\n      _colors2 = _slicedToArray(_colors, 3),\n      r = _colors2[0],\n      g = _colors2[1],\n      b = _colors2[2];\n\n  return \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n};\n\nexports.darkenColor = darkenColor;","map":{"version":3,"sources":["../../src/utils/index.js"],"names":["hexToRGB","num","parseInt","color","r","b","g","limitValues","value","darkenColor","colors"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAKA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAW;AAC1B,MAAMC,GAAG,GAAGC,QAAQ,CAACC,KAAK,CAALA,OAAAA,CAAAA,GAAAA,EAAD,EAACA,CAAD,EAApB,EAAoB,CAApB;AACA,MAAMC,CAAC,GAAG,CAACH,GAAG,IAAJ,EAAA,IAFgB,EAE1B,CAF0B,CAEC;;AAC3B,MAAMI,CAAC,GAAG,CAAEJ,GAAG,IAAJ,CAACA,GAAF,MAAA,IAHgB,EAG1B,CAH0B,CAGW;;AACrC,MAAMK,CAAC,GAAG,CAACL,GAAG,GAAJ,QAAA,IAJgB,EAI1B,CAJ0B,CAIM;;AAChC,SAAO,CAAA,CAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AALF,CAAA;;AAQA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAW;AAC7B,MAAIC,KAAK,GAAT,GAAA,EAAiB,OAAA,GAAA;AACjB,MAAIA,KAAK,GAAT,CAAA,EAAe,OAAA,CAAA;AACf,SAAA,KAAA;AAHF,CAAA;;AAMO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAW;AACpC,MAAA,MAAA;;AACA,MAAI,CAAJ,KAAA,EAAY;AACV,WAAA,SAAA;AACD;;AACD,MAAIN,KAAK,CAALA,OAAAA,CAAAA,KAAAA,MAAyB,CAA7B,CAAA,EAAiC;AAC/BO,IAAAA,MAAM,GAAG,KAAK,CAAL,OAAA,CAAA,MAAA,EAAA,EAAA,EAAA,OAAA,CAAA,GAAA,EAAA,EAAA,EAAA,KAAA,CAAA,GAAA,EAAA,GAAA,CAGF,UAAA,GAAA,EAAG;AAAA,aAAIR,QAAQ,CAAA,GAAA,EAARA,EAAQ,CAARA,GAAJ,EAAA;AAHD,KAAA,EAAA,GAAA,CAATQ,WAAS,CAATA;AADF,GAAA,MAMO;AACLA,IAAAA,MAAM,GAAGV,QAAQ,CAARA,KAAQ,CAARA,CAAAA,GAAAA,CAATU,WAASV,CAATU;AACD;;AAbmC,MAAA,OAAA,GAAA,MAAA;AAAA,MAAA,QAAA,GAAA,cAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AAAA,MAc7BN,CAd6B,GAAA,QAAA,CAAA,CAAA,CAAA;AAAA,MAc1BE,CAd0B,GAAA,QAAA,CAAA,CAAA,CAAA;AAAA,MAcvBD,CAduB,GAAA,QAAA,CAAA,CAAA,CAAA;;AAepC,SAAA,OAAA,MAAA,CAAA,CAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA,EAAA,IAAA,EAAA,MAAA,CAAA,CAAA,EAAA,GAAA,CAAA;AAfK,CAAA","sourcesContent":["/*\n * Code inspired by Chris Coyier's vanilla css lighten/darken color solution\n * https://css-tricks.com/snippets/javascript/lighten-darken-color/\n */\n\nconst hexToRGB = (color) => {\n  const num = parseInt(color.replace('#', ''), 16)\n  const r = (num >> 16) - 30 // eslint-disable-line\n  const b = ((num >> 8) & 0x00FF) - 30 // eslint-disable-line\n  const g = (num & 0x0000FF) - 30 // eslint-disable-line\n  return [r, b, g]\n}\n\nconst limitValues = (value) => {\n  if (value > 255) return 255\n  if (value < 0) return 0\n  return value\n}\n\nexport const darkenColor = (color) => {\n  let colors\n  if (!color) {\n    return '#1A3270'\n  }\n  if (color.indexOf('rgb') !== -1) {\n    colors = color.replace('rgb(', '')\n      .replace(')', '')\n      .split(',')\n      .map(num => parseInt(num, 10) - 30)\n      .map(limitValues)\n  } else {\n    colors = hexToRGB(color).map(limitValues)\n  }\n  const [r, g, b] = colors\n  return `rgb(${r}, ${g}, ${b})`\n}\n"]},"metadata":{},"sourceType":"script"}